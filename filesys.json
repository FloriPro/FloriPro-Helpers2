{"boot.dat": "Yy9zeXMvaW5pdC5qcw0KYy9zeXMvc3lzLmpzDQpjL3N5cy9maWxlc3lzLmpzDQpjL3N5cy9ib290Lmpz", "programs": {"explorer": {"main.js": "Y29uc29sZS5lcnJvcigicHJvZ3JhbXMgbm90IG1hZGUiKQ=="}, "testScript": {"main.js": "Y2xhc3MgcHJvZ3JhbSBleHRlbmRzIFN5c3RlbS5wcm9ncmFtLmRlZmF1bHQgew0KICAgIGNvbnN0cnVjdG9yKCkgew0KICAgICAgICBzdXBlcigpDQogICAgICAgIC8vZG9uJ3QgdXNlIQ0KICAgIH0NCiAgICBhc3luYyBpbml0KCkgew0KICAgICAgICBjb25zb2xlLmxvZygic3RhcnRlZCBhcyBpZCAiICsgdGhpcy5pZCk7DQogICAgICAgIHRoaXMud2luZG93ID0gYXdhaXQgU3lzdGVtSHRtbC5XaW5kb3dIYW5kbGVyLmNyZWF0ZVdpbmRvdygidGVzdCIsDQogICAgICAgICAgICBhc3luYyAoKSA9PiB7DQogICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53aW5kb3cuc2V0Q29udGVudChgPHA+aGk8L3A+PHNjcmlwdD5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsKCk9Pntjb25zb2xlLmxvZygiY2xpY2siKX0pPC9zY3JpcHQ+YCk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgdGhpcy53aW5kb3cuY2xvc2UgPSAoKSA9PiB7DQogICAgICAgICAgICB0aGlzLnN0b3AoKQ0KICAgICAgICAgICAgcmV0dXJuIHRydWUNCiAgICAgICAgfQ0KICAgIH0NCn0NCm5ldyBwcm9ncmFtKCk7", "run.js": "U3lzdGVtLnByb2dyYW0ucnVuUHJvZ3JhbShQQVRILmZvbGRlcigpICsgIi9tYWluLmpzIik="}}, "sys": {"boot.js": "YXN5bmMgZnVuY3Rpb24gYm9vdCgpIHsNCiAgICBhd2FpdCBTeXN0ZW0uY3JlYXRlRXZlbnRzKCk7DQoNCg0KICAgIGF3YWl0IFN5c3RlbS5ydW4oImMvc3lzL0hUTUwvaHRtbC5qcyIpIC8vbG9hZCBodG1sDQoNCiAgICAvL3N0YXJ0dXAgcHJvZ3JhbXMNCiAgICB2YXIgcCA9IGF3YWl0IFN5c3RlbS5vcHRpb25zLmdldCgic3RhcnR1cCIpDQogICAgZm9yICh2YXIgeCBvZiBPYmplY3Qua2V5cyhwKSkgew0KICAgICAgICBpZiAocFt4XSA9PSB0cnVlKSB7DQogICAgICAgICAgICBhd2FpdCBTeXN0ZW0ucnVuKHgpOw0KICAgICAgICB9DQogICAgfQ0KICAgIA0KfQ0KYm9vdCgpOw==", "filesys.js": "Y29uc29sZS5sb2coImluaXRpYWxpemluZyBGaWxlU3lzdGVtIik7DQoNCmNsYXNzIEZpbGVTeXN0ZW1DbGFzcyB7DQogICAgcmVzZXQoKXsNCiAgICAgICAgdGhpcy5yZWFsTG9jYWxTdG9yYWdlLmNsZWFyKCk7DQogICAgfQ0KICAgICAgICANCiAgICBjb25zdHJ1Y3RvcigpIHsNCiAgICAgICAgdGhpcy5Qb3NpdGlvbmFsRmlsZVN5c3RlbSA9IFBvc2l0aW9uYWxGaWxlU3lzdGVtOw0KICAgICAgICB0aGlzLnJlYWxMb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2U7DQogICAgICAgIHNldFRpbWVvdXQodGhpcy5yZW1vdmVMb2NhbFN0b3JhZ2UsIDEpDQoNCiAgICAgICAgdGhpcy5yYW1GaWxlcyA9IHt9DQogICAgfQ0KICAgIGFzeW5jIHJlbW92ZUxvY2FsU3RvcmFnZSgpIHsNCg0KICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCAnbG9jYWxTdG9yYWdlJywgew0KICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZA0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBzZXRzIHRoZSBTdHJpbmcgb2YgYSBmaWxlDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggDQogICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdCANCiAgICAgKi8NCiAgICBhc3luYyBzZXRGaWxlU3RyaW5nKHBhdGgsIGRhdCkgew0KICAgICAgICBpZiAoT2JqZWN0LmtleXMoZmFzdEZpbGVMb29rdXApLmluY2x1ZGVzKHBhdGgpKSB7DQogICAgICAgICAgICB0aGlzLnJlYWxMb2NhbFN0b3JhZ2Uuc2V0SXRlbShmYXN0RmlsZUxvb2t1cFtwYXRoXSwgZGF0KTsNCiAgICAgICAgICAgIHRoaXMucmFtRmlsZXNbcGF0aF0gPSB1bmRlZmluZWQ7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGNvbnNvbGUud2FybigiZmlsZSBuZWVkcyB0byBiZSBjcmVhdGVkIGZpcnN0OiAiICsgcGF0aCkNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICBhc3luYyBjcmVhdGVGaWxlKHBhdGgpIHsNCiAgICAgICAgdmFyIGZvbGRlciA9IHBhdGguc3BsaXQoIi8iKS5zbGljZSgwLCAtMSkuam9pbigiLyIpOw0KICAgICAgICB2YXIgZiA9IGF3YWl0IHRoaXMuZ2V0VGFibGVQb3MoZm9sZGVyLCAiYyIsIEZpbGVTeXN0ZW1UYWJsZSk7DQoNCiAgICAgICAgdmFyIGlkID0gdGhpcy5nZXRVbnVzZWRJZCgpOw0KICAgICAgICB1c2VkRmlsZVN5c0lkcy5wdXNoKGlkKTsNCiAgICAgICAgZi5maWxlc1twYXRoLnNwbGl0KCIvIilbcGF0aC5zcGxpdCgiLyIpLmxlbmd0aCAtIDFdXSA9IGlkDQoNCiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oImZpbGVTeXN0ZW1UYWJsZSIsIEpTT04uc3RyaW5naWZ5KEZpbGVTeXN0ZW1UYWJsZSkpOw0KICAgICAgICBsb2FkRmFzdExvb2t1cChGaWxlU3lzdGVtVGFibGUsICJjIikNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KICAgIC8qKg0KICAgICAqIHJldHVybnMgdGhlIGNvbnRlbnQgb2YgYSBmaWxlDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggDQogICAgICogQHJldHVybnMge3N0cmluZ30NCiAgICAgKi8NCiAgICBhc3luYyBnZXRGaWxlU3RyaW5nKHBhdGgpIHsNCiAgICAgICAgdmFyIGRhdCA9ICIiDQogICAgICAgIGlmICh0aGlzLnJhbUZpbGVzW3BhdGhdID09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgdmFyIHIgPSBhd2FpdCB0aGlzLmxvY2FsRmlsZUxvYWQocGF0aCk7DQogICAgICAgICAgICB0aGlzLnJhbUZpbGVzW3BhdGhdID0gcjsgLy9zdG9yZSB0aGUgZmlsZSBpbiByYW0gZm9yIGZhc3QgYWNjZXMNCiAgICAgICAgICAgIHJldHVybiByOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIHRoaXMucmFtRmlsZXNbcGF0aF07DQogICAgICAgIH0NCiAgICB9DQogICAgLyoqDQogICAgICogcmV0dXJucyB0aGUganNvbiBwYXJzZWQgY29udGVudCBvZiBhIGZpbGUNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCANCiAgICAgKiBAcmV0dXJucyB7Kn0NCiAgICAgKi8NCiAgICBhc3luYyBnZXRGaWxlSnNvbihwYXRoKSB7DQogICAgICAgIHZhciBzID0gYXdhaXQgdGhpcy5nZXRGaWxlU3RyaW5nKHBhdGgpDQogICAgICAgIHRyeSB7DQogICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzKQ0KICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoImNvdWxkIG5vdCBwYXJzZSBmaWxlIEpTT046ICIgKyBwYXRoKTsNCiAgICAgICAgICAgIHJldHVybiBudWxsDQogICAgICAgIH0NCiAgICB9DQogICAgLyoqDQogICAgICogDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggDQogICAgICogQHJldHVybnMge0ZpbGVTeXNGaWxlfSBGaWxlU3lzRmlsZQ0KICAgICAqLw0KICAgIGFzeW5jIGdldEZpbGUocGF0aCkgew0KICAgICAgICB2YXIgb3V0ID0gbmV3IEZpbGVTeXNGaWxlKHBhdGgsIGF3YWl0IHRoaXMuZ2V0RmlsZVN0cmluZyhwYXRoKSk7DQogICAgICAgIHJldHVybiBvdXQ7DQogICAgfQ0KICAgIC8qKg0KICAgICAqIA0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIA0KICAgICAqIEByZXR1cm5zIHtGaWxlU3lzRm9sZGVyfSBGaWxlU3lzRm9sZGVyDQogICAgICovDQogICAgYXN5bmMgZ2V0Rm9sZGVyKHBhdGgpIHsNCiAgICAgICAgdmFyIGQgPSBuZXcgRmlsZVN5c0ZvbGRlcihwYXRoKTsNCiAgICAgICAgcmV0dXJuIGQNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBsb2FkcyB0aGUgZmlsZSBmcm9tIGxvY2FsIHN0b3JhZ2UNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCANCiAgICAgKi8NCiAgICBhc3luYyBsb2NhbEZpbGVMb2FkKHBhdGgpIHsNCiAgICAgICAgaWYgKHRoaXMucmVhbExvY2FsU3RvcmFnZS5nZXRJdGVtKGZhc3RGaWxlTG9va3VwW3BhdGhdKSA9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgICAgIHJldHVybiAiIjsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdGhpcy5yZWFsTG9jYWxTdG9yYWdlLmdldEl0ZW0oZmFzdEZpbGVMb29rdXBbcGF0aF0pLnJlcGxhY2UoIlxyXG4iLCAiXG4iKQ0KICAgIH0NCg0KICAgIGdldFVudXNlZElkKCkgew0KICAgICAgICB2YXIgaSA9IDA7DQogICAgICAgIHdoaWxlICh1c2VkRmlsZVN5c0lkcy5pbmNsdWRlcyhpKSkgew0KICAgICAgICAgICAgaSsrDQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggDQogICAgICogQHJldHVybnMge3N0cmluZ1tdfSBsaXN0IG9mIGZpbGVzDQogICAgICovDQogICAgYXN5bmMgZ2V0RmlsZXMocGF0aCkgew0KICAgICAgICB2YXIgZiA9IGF3YWl0IHRoaXMuZ2V0VGFibGVQb3MocGF0aCwgImMiLCBGaWxlU3lzdGVtVGFibGUpOw0KICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoZlsiZmlsZXMiXSk7DQogICAgfQ0KICAgIC8qKg0KICAgICAqIA0KICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIA0KICAgICAqIEByZXR1cm5zIHtzdHJpbmdbXX0gbGlzdCBvZiBmb2xkZXJzDQogICAgICovDQogICAgYXN5bmMgZ2V0Rm9sZGVycyhwYXRoKSB7DQogICAgICAgIHZhciBmID0gYXdhaXQgdGhpcy5nZXRUYWJsZVBvcyhwYXRoLCAiYyIsIEZpbGVTeXN0ZW1UYWJsZSk7DQogICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhmWyJmb2xkZXIiXSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHAgDQogICAgICogQHBhcmFtIHsqfSBkYXQgDQogICAgICogQHJldHVybnMgeyp9IFBhcnQgb2YgdGhlIEZpbGVTeXN0ZW1UYWJsZSBzdGFydGluZyBhdCB0aGUgZGVzaXJlZCBwYXRoDQogICAgICovDQogICAgYXN5bmMgZ2V0VGFibGVQb3MocGF0aCwgcCwgZGF0KSB7DQogICAgICAgIGlmIChwYXRoLmVuZHNXaXRoKCIvIikpIHsNCiAgICAgICAgICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIC0xKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAocCA9PSBwYXRoKSB7DQogICAgICAgICAgICByZXR1cm4gZGF0Ow0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZm9yICh2YXIgeCBvZiBPYmplY3Qua2V5cyhkYXRbImZvbGRlciJdKSkgew0KICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFRhYmxlUG9zKHBhdGgsIHAgKyAiLyIgKyB4LCBkYXRbImZvbGRlciJdW3hdKQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0KY2xhc3MgRmlsZVN5c0ZpbGUgew0KICAgIGNvbnN0cnVjdG9yKHBhdGgsIHRleHQpIHsNCiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDsNCiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDsNCiAgICB9DQogICAgYXN5bmMgcmVtb3ZlKCkgew0KICAgICAgICBjb25zb2xlLndhcm4oIkZpbGU6IHJlbW92ZSBub3QgaW1wbGVtZW50ZWQiKTsNCiAgICAgICAgcmV0dXJuIGZhbHNlDQogICAgfQ0KICAgIGFzeW5jIHJlbmFtZSgpIHsNCiAgICAgICAgY29uc29sZS53YXJuKCJGaWxlOiByZW5hbWUgbm90IGltcGxlbWVudGVkIik7DQogICAgICAgIHJldHVybiBmYWxzZQ0KICAgIH0NCiAgICBhc3luYyBnZXRJbmZvcm1hdGlvbigpIHsNCiAgICAgICAgY29uc29sZS53YXJuKCJGaWxlOiBnZXRJbmZvcm1hdGlvbiBub3QgaW1wbGVtZW50ZWQiKTsNCiAgICAgICAgcmV0dXJuIGZhbHNlDQogICAgfQ0KfQ0KY2xhc3MgRmlsZVN5c0luZm8geyAvL1RPRE8NCiAgICBjb25zdHJ1Y3RvcigpIHsNCiAgICAgICAgdGhpcy5jcmVhdGVkRGF0ZSA9ICIiOw0KICAgIH0NCn0NCmNsYXNzIEZpbGVTeXNGb2xkZXIgew0KICAgIGNvbnN0cnVjdG9yKHBhdGgpIHsNCiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDsNCiAgICAgICAgdGhpcy5maWxlcyA9IFtdDQogICAgICAgIHRoaXMuZm9sZGVycyA9IFtdDQoNCiAgICAgICAgLy9sb2FkIGRhdGEgZnJvbSBmaWxlU3lzVGFibGUNCiAgICB9DQp9DQoNCmNsYXNzIFBvc2l0aW9uYWxGaWxlU3lzdGVtIHsgLy9UT0RPDQoNCn0NCg0KdmFyIHMgPSBuZXcgRmlsZVN5c3RlbUNsYXNzKCk7DQpTeXN0ZW1GaWxlU3lzdGVtID0gczs=", "functions": {"reset.js": "U3lzdGVtRmlsZVN5c3RlbS5yZXNldCgpOw0KbG9jYXRpb24ucmVsb2FkKCk7"}, "HTML": {"body.html": "PGRpdiBpZD0iYWxsIj4NCiAgICA8ZGl2IGlkPSJzdHVmZiI+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0iU3RhcnRNZW51IiBzdHlsZT0iZGlzcGxheTogbm9uZTt6LWluZGV4Ojk5OTk5OSI+DQogICAgICAgIDxkaXYgY2xhc3M9IlN0YXJ0TWVudVNlbGVjdG9yIiBrZXk9InRlc3QiPg0KICAgICAgICAgICAgPHA+VGVzdDwvcD4NCiAgICAgICAgICAgIDxocj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9IlN0YXJ0TWVudVNlbGVjdG9yIiBrZXk9InRlc3QyIj4NCiAgICAgICAgICAgIDxwPlRlc3QtMjwvcD4NCiAgICAgICAgICAgIDxocj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9IlN0YXJ0TWVudVNlbGVjdG9yIiBrZXk9InRlc3QzIj4NCiAgICAgICAgICAgIDxwPlRlc3QtMzwvcD4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0idGFza2JhciI+DQogICAgICAgIDxidXR0b24gaWQ9InN0YXJ0TWVudUJ1dHRvbiI+DQogICAgICAgICAgICA8c3Bhbj7igZU8L3NwYW4+DQogICAgICAgIDwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9kaXY+", "html.js": "", "style.css": "I2FsbCB7DQogICAgYmFja2dyb3VuZDogdXJsKCIiKSBjZW50ZXIgY2VudGVyIC8gY292ZXIgbm8tcmVwZWF0Ow0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQoNCiAgICBib3R0b206IDA7DQogICAgZGlzcGxheTogYmxvY2s7DQogICAgbGVmdDogMDsNCiAgICBwb3NpdGlvbjogZml4ZWQ7DQogICAgcmlnaHQ6IDA7DQogICAgdG9wOiAwOw0KfQ0KDQppbnB1dCB7DQogICAgb3V0bGluZTogbm9uZTsNCn0NCg0KLndpbmRvdyB7DQogICAgYmFja2dyb3VuZDogd2hpdGU7DQogICAgYm94LXNoYWRvdzogMHB4IDBweCAzMHB4ICMwMDAwMDAyNDsNCiAgICBwYWRkaW5nOiAxMnB4Ow0KICAgIGN1cnNvcjogbnctcmVzaXplOw0KfQ0KDQoud2luZG93SW5saW5lIHsNCiAgICBjdXJzb3I6IGRlZmF1bHQ7DQogICAgcGFkZGluZzogM3B4Ow0KfQ0KDQouY29udGVudHsNCiAgICBvdmVyZmxvdzogYXV0bzsNCn0NCg0KLnRpdGxlLWJhciB7DQogICAgYmFja2dyb3VuZDogd2hpdGVzbW9rZTsNCiAgICBjdXJzb3I6IG1vdmU7DQogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsNCiAgICBwYWRkaW5nOiAzcHggMnB4IDNweCAzcHg7DQp9DQoNCi50aXRsZS1iYXItdGV4dCB7DQogICAgZm9udC13ZWlnaHQ6IHVuc2V0Ow0KICAgIGNvbG9yOiBibGFjazsNCiAgICBsZXR0ZXItc3BhY2luZzogMDsNCiAgICBtYXJnaW4tcmlnaHQ6IDI0cHg7DQp9DQoNCi50aXRsZS1iYXItdGV4dCBzcGFuIHsNCiAgICBmb250LXNpemU6IDMwcHg7DQp9DQoNCi50aXRsZS1iYXItY29udHJvbHMgew0KICAgIGRpc3BsYXk6IGZsZXg7DQp9DQoNCi50aXRsZS1iYXItY29udHJvbHMgYnV0dG9uIHsNCiAgICBwYWRkaW5nOiAwOw0KICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgIG1pbi13aWR0aDogMTZweDsNCiAgICBtaW4taGVpZ2h0OiAxNHB4Ow0KICAgIGJvcmRlcjogMHB4Ow0KfQ0KDQoudGl0bGUtYmFyLWNvbnRyb2xzIGJ1dHRvbjphY3RpdmUgew0KICAgIHBhZGRpbmc6IDA7DQp9DQoNCi50aXRsZS1iYXItY29udHJvbHMgYnV0dG9uOmZvY3VzIHsNCiAgICBvdXRsaW5lOiBub25lOw0KfQ0KDQoudGl0bGUtYmFyLWNvbnRyb2xzIGJ1dHRvblthcmlhLWxhYmVsPSJNaW5pbWl6ZSJdIHsNCiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCUzQ3N2ZyB3aWR0aD0nNicgaGVpZ2h0PScyJyBmaWxsPSdub25lJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFJTNDcGF0aCBmaWxsPSclMjMwMDAnIGQ9J00wIDBoNnYySDB6Jy8lM0UlM0Mvc3ZnJTNFIik7DQogICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsNCiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBib3R0b20gM3B4IGxlZnQgNHB4Ow0KICAgIHdpZHRoOiAzMHB4Ow0KICAgIGhlaWdodDogMzBweDsNCn0NCg0KLnRpdGxlLWJhci1jb250cm9scyBidXR0b25bYXJpYS1sYWJlbD0iTWF4aW1pemUiXSB7DQogICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwlM0Nzdmcgd2lkdGg9JzknIGhlaWdodD0nOScgZmlsbD0nbm9uZScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSUzQ3BhdGggZmlsbC1ydWxlPSdldmVub2RkJyBjbGlwLXJ1bGU9J2V2ZW5vZGQnIGQ9J005IDBIMHY5aDlWMHpNOCAySDF2Nmg3VjJ6JyBmaWxsPSclMjMwMDAnLyUzRSUzQy9zdmclM0UiKTsNCiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0Ow0KICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcCAycHggbGVmdCAzcHg7DQogICAgd2lkdGg6IDMwcHg7DQogICAgaGVpZ2h0OiAzMHB4Ow0KfQ0KDQoudGl0bGUtYmFyLWNvbnRyb2xzIGJ1dHRvblthcmlhLWxhYmVsPSJSZXN0b3JlIl0gew0KICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsJTNDc3ZnIHdpZHRoPSc4JyBoZWlnaHQ9JzknIGZpbGw9J25vbmUnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UlM0NwYXRoIGZpbGw9JyUyMzAwMCcgZD0nTTIgMGg2djJIMnpNNyAyaDF2NEg3ek0yIDJoMXYxSDJ6TTYgNWgxdjFINnpNMCAzaDZ2Mkgwek01IDVoMXY0SDV6TTAgNWgxdjRIMHpNMSA4aDR2MUgxeicvJTNFJTNDL3N2ZyUzRSIpOw0KICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7DQogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogdG9wIDJweCBsZWZ0IDNweDsNCiAgICB3aWR0aDogMzBweDsNCiAgICBoZWlnaHQ6IDMwcHg7DQp9DQoNCi50aXRsZS1iYXItY29udHJvbHMgYnV0dG9uW2FyaWEtbGFiZWw9IkhlbHAiXSB7DQogICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwlM0Nzdmcgd2lkdGg9JzYnIGhlaWdodD0nOScgZmlsbD0nbm9uZScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSUzQ3BhdGggZmlsbD0nJTIzMDAwJyBkPSdNMCAxaDJ2Mkgwek0xIDBoNHYxSDF6TTQgMWgydjJINHpNMyAzaDJ2MUgzek0yIDRoMnYySDJ6TTIgN2gydjJIMnonLyUzRSUzQy9zdmclM0UiKTsNCiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0Ow0KICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcCAycHggbGVmdCA1cHg7DQogICAgd2lkdGg6IDMwcHg7DQogICAgaGVpZ2h0OiAzMHB4Ow0KfQ0KDQoudGl0bGUtYmFyLWNvbnRyb2xzIGJ1dHRvblthcmlhLWxhYmVsPSJDbG9zZSJdIHsNCiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCUzQ3N2ZyB3aWR0aD0nOCcgaGVpZ2h0PSc3JyBmaWxsPSdub25lJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFJTNDcGF0aCBmaWxsLXJ1bGU9J2V2ZW5vZGQnIGNsaXAtcnVsZT0nZXZlbm9kZCcgZD0nTTAgMGgydjFoMXYxaDJWMWgxVjBoMnYxSDd2MUg2djFINXYxaDF2MWgxdjFoMXYxSDZWNkg1VjVIM3YxSDJ2MUgwVjZoMVY1aDFWNGgxVjNIMlYySDFWMUgwVjB6JyBmaWxsPSclMjMwMDAnLyUzRSUzQy9zdmclM0UiKTsNCiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0Ow0KICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcCAzcHggbGVmdCA0cHg7DQogICAgd2lkdGg6IDMwcHg7DQogICAgaGVpZ2h0OiAzMHB4Ow0KfQ0KDQoud2luZG93LWxheWVyIC53aW5kb3cgLnRpdGxlLWJhciAudGl0bGUtYmFyLWNvbnRyb2xzIGJ1dHRvblthcmlhLWxhYmVsPU1pbmltaXplXSB7DQogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogYm90dG9tIDRweCBsZWZ0IDRweDsNCn0NCg0KI3Rhc2tiYXIgew0KICAgIGJhY2tncm91bmQ6IHJnYigyOSwgMjksIDI5KTsNCiAgICAvKiBib3JkZXItdG9wOiAxcHggc29saWQgI2ZmZjsgKi8NCiAgICBib3R0b206IDA7DQogICAgY29sb3I6ICMwMDA7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBmbGV4OiAxOw0KICAgIGxlZnQ6IDA7DQogICAgLyogb3V0bGluZTogMXB4IHNvbGlkICNkZmRmZGY7ICovDQogICAgcGFkZGluZzogMnB4Ow0KICAgIHBvc2l0aW9uOiBmaXhlZDsNCiAgICByaWdodDogMDsNCiAgICB6LWluZGV4OiA1MDAwOw0KICAgIGhlaWdodDogMzVweDsNCn0NCg0KcCB7DQogICAgbWFyZ2luOiAwcHg7DQp9DQoNCiNTdGFydE1lbnUgew0KICAgIGJhY2tncm91bmQ6IHJnYigyOSwgMjksIDI5KTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjksIDI5LCAyOSk7DQogICAgLyogYm94LXNoYWRvdzogaW5zZXQgLTFweCAtMXB4ICMwYTBhMGEsIGluc2V0IDFweCAxcHggI2RmZGZkZiwgaW5zZXQgLTJweCAtMnB4IGdyZXksIGluc2V0IDJweCAycHggI2ZmZjsgKi8NCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogICAgaGVpZ2h0OiBhdXRvOw0KICAgIGxlZnQ6IDA7DQogICAgbGlzdC1zdHlsZTogbm9uZTsNCiAgICBtYXJnaW46IDA7DQogICAgcGFkZGluZzogMnB4Ow0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICBib3R0b206IDM5cHg7DQogICAgdmVydGljYWwtYWxpZ246IHRvcDsNCn0NCg0KLlN0YXJ0TWVudVNlbGVjdG9yIHsNCiAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgY29sb3I6IHdoaXRlOw0KfQ0KDQpkaXYgew0KICAgIGJvcmRlcjogMDsNCiAgICBmb250LXNpemU6IDMwMCU7DQogICAgZm9udDogaW5oZXJpdDsNCiAgICBtYXJnaW46IDA7DQogICAgcGFkZGluZzogMDsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7DQp9DQoNCmJ1dHRvbiB7DQogICAgLyogYWxpZ24taXRlbXM6IGNlbnRlcjsgKi8NCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIC8qIGZsZXgtZGlyZWN0aW9uOiByb3c7ICovDQogICAgbGluZS1oZWlnaHQ6IDE0cHg7DQogICAgcGFkZGluZzogNXB4Ow0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICBiYWNrZ3JvdW5kOiByZ2IoMjQ3LCAyNDcsIDI0Nyk7DQogICAgYm9yZGVyOiB3aGl0ZTsNCiAgICAvKiBib3gtc2hhZG93OiBpbnNldCAtMXB4IC0xcHggIzBhMGEwYSwgaW5zZXQgMXB4IDFweCAjZmZmLCBpbnNldCAtMnB4IC0ycHggZ3JleSwgaW5zZXQgMnB4IDJweCAjZGZkZmRmOyovDQp9DQoNCmJ1dHRvbjpob3ZlciB7DQogICAgYmFja2dyb3VuZDogcmdiKDE3NCwgMjAyLCAyNTUpOw0KfQ0KDQoqIHsNCiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBzdWJwaXhlbC1hbnRpYWxpYXNlZDsNCiAgICBmb250LXNpemU6IDI1cHg7DQogICAgZm9udC13ZWlnaHQ6IHVuc2V0Ow0KICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmOw0KICAgIHpvb206IDEuMDA7DQp9DQoNCiNzdGFydE1lbnVCdXR0b24gew0KICAgIHdpZHRoOiAzNXB4Ow0KICAgIGhlaWdodDogMzVweDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZm9udC1zaXplOiA1MHB4Ow0KICAgIGJhY2tncm91bmQ6IHJnYigyOSwgMjksIDI5KTsNCn0NCg0KI3N0YXJ0TWVudUJ1dHRvbiBzcGFuIHsNCiAgICBmb250LXNpemU6IDYwcHg7DQogICAgY29sb3I6IHdoaXRlOw0KfQ0KDQouY29uc29sZU91dHB1dCB7DQogICAgYmFja2dyb3VuZDogcmdiKDUsIDEwLCA1MSk7DQogICAgY29sb3I6IHdoaXRlOw0KICAgIGhlaWdodDogNDY1cHg7DQogICAgb3ZlcmZsb3cteTogc2Nyb2xsOw0KDQogICAgZGlzcGxheTogZmxleDsNCiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uLXJldmVyc2U7DQp9DQoNCi5jb25zb2xlSW5wdXQgew0KICAgIGJhY2tncm91bmQ6IHJnYig1LCAxMCwgNTEpOw0KICAgIGNvbG9yOiB3aGl0ZTsNCiAgICBib3JkZXI6IDBweDsNCn0NCg0KLmNvbnNvbGVMb2cgew0KICAgIGNvbG9yOiB3aGl0ZTsNCn0NCg0KLmNvbnNvbGVJbmZvcm1hdGlvbnsNCiAgICBjb2xvcjogZ3JheTsNCn0NCg0KLmNvbnNvbGVXYXJuIHsNCiAgICBjb2xvcjogcmdiKDIyMiwgMTY3LCAwKTsNCn0NCg0KLmNvbnNvbGVFcnJvciB7DQogICAgY29sb3I6IHJnYigyNTUsIDAsIDApOw0KfQ==", "window.html": "PGRpdiBjbGFzcz0id2luZG93IHdpbmRvd18lJWlkJSUiIHN0eWxlPSJ6LWluZGV4OiAxO3Bvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwcHg7IGxlZnQ6IDBweDsiPg0KICAgIDxkaXYgY2xhc3M9IndpbmRvd0lubGluZSIgc3R5bGU9ImhlaWdodDogaW5oZXJpdDsiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJ0aXRsZS1iYXIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGUtYmFyLXRleHQiPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ3aW5kb3ctbmFtZSI+JSVuYW1lJSU8L3NwYW4+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpdGxlLWJhci1jb250cm9scyI+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiBhcmlhLWxhYmVsPSJNaW5pbWl6ZSIgY2xhc3M9Im1pbmltaXplIj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIGFyaWEtbGFiZWw9Ik1heGltaXplIiBjbGFzcz0ibWF4aW1pemUiPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDxidXR0b24gYXJpYS1sYWJlbD0iQ2xvc2UiIGNsYXNzPSJjbG9zZSI+PC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgc3R5bGU9ImRpc3BsYXk6ZmxleCIgY2xhc3M9ImJ1dHRvbkRhdGEiPjwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50IiBzdHlsZT0iaGVpZ2h0OiBjYWxjKDEwMCUgLSA3MHB4KTsiPg0KICAgICAgICAgICAgPHA+Li4uPC9wPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg=="}, "init.js": "Y29uc29sZS5sb2coImluaXRpYWxpemluZyBTeXN0ZW0iKTsNCg0KLy91dGlsaXR5IGZ1bmN0aW9ucw0KcmVtb3ZlID0gZnVuY3Rpb24gKGFyciwgd2hhdCkgew0KICAgIHZhciBmb3VuZCA9IGFyci5pbmRleE9mKHdoYXQpOw0KDQogICAgd2hpbGUgKGZvdW5kICE9PSAtMSkgew0KICAgICAgICBhcnIuc3BsaWNlKGZvdW5kLCAxKTsNCiAgICAgICAgZm91bmQgPSBhcnIuaW5kZXhPZih3aGF0KTsNCiAgICB9DQp9DQoNClN5c3RlbUZpbGVTeXN0ZW0gPSB1bmRlZmluZWQ7DQpTeXN0ZW0gPSB1bmRlZmluZWQNClN5c3RlbUh0bWwgPSB1bmRlZmluZWQ7", "options": {"eventReplacements.json": "ew0KICAgICJ0b3VjaGVuZCI6ICJjbGljayIsDQogICAgInRvdWNoc3RhcnQiOiAibW91c2Vkb3duIiwNCiAgICAidG91Y2htb3ZlIjogIm1vdXNlbW92ZSINCn0=", "events.json": "ew0KICAgICJhYm9ydCI6IHRydWUsDQogICAgImFuaW1hdGlvbmNhbmNlbCI6IHRydWUsDQogICAgImFuaW1hdGlvbmVuZCI6IHRydWUsDQogICAgImFuaW1hdGlvbml0ZXJhdGlvbiI6IHRydWUsDQogICAgImFuaW1hdGlvbnN0YXJ0IjogdHJ1ZSwNCiAgICAiYXV4Y2xpY2siOiB0cnVlLA0KICAgICJiZWZvcmVpbnB1dCI6IHRydWUsDQogICAgImJsdXIiOiB0cnVlLA0KICAgICJjYW5wbGF5IjogdHJ1ZSwNCiAgICAiY2FucGxheXRocm91Z2giOiB0cnVlLA0KICAgICJjaGFuZ2UiOiB0cnVlLA0KICAgICJjbGljayI6IHRydWUsDQogICAgImNsb3NlIjogdHJ1ZSwNCiAgICAiY29tcG9zaXRpb25lbmQiOiB0cnVlLA0KICAgICJjb21wb3NpdGlvbnN0YXJ0IjogdHJ1ZSwNCiAgICAiY29tcG9zaXRpb251cGRhdGUiOiB0cnVlLA0KICAgICJjb250ZXh0bWVudSI6IHRydWUsDQogICAgImN1ZWNoYW5nZSI6IHRydWUsDQogICAgImRibGNsaWNrIjogdHJ1ZSwNCiAgICAiZHJhZyI6IHRydWUsDQogICAgImRyYWdlbmQiOiB0cnVlLA0KICAgICJkcmFnZW50ZXIiOiB0cnVlLA0KICAgICJkcmFnbGVhdmUiOiB0cnVlLA0KICAgICJkcmFnb3ZlciI6IHRydWUsDQogICAgImRyYWdzdGFydCI6IHRydWUsDQogICAgImRyb3AiOiB0cnVlLA0KICAgICJkdXJhdGlvbmNoYW5nZSI6IHRydWUsDQogICAgImVtcHRpZWQiOiB0cnVlLA0KICAgICJlbmRlZCI6IHRydWUsDQogICAgImVycm9yIjogdHJ1ZSwNCiAgICAiZm9jdXMiOiB0cnVlLA0KICAgICJmb2N1c2luIjogdHJ1ZSwNCiAgICAiZm9jdXNvdXQiOiB0cnVlLA0KICAgICJmb3JtZGF0YSI6IHRydWUsDQogICAgImdvdHBvaW50ZXJjYXB0dXJlIjogdHJ1ZSwNCiAgICAiaW5wdXQiOiB0cnVlLA0KICAgICJpbnZhbGlkIjogdHJ1ZSwNCiAgICAia2V5ZG93biI6IHRydWUsDQogICAgImtleXByZXNzIjogdHJ1ZSwNCiAgICAia2V5dXAiOiB0cnVlLA0KICAgICJsb2FkIjogdHJ1ZSwNCiAgICAibG9hZGVkZGF0YSI6IHRydWUsDQogICAgImxvYWRlZG1ldGFkYXRhIjogdHJ1ZSwNCiAgICAibG9hZHN0YXJ0IjogdHJ1ZSwNCiAgICAibG9zdHBvaW50ZXJjYXB0dXJlIjogdHJ1ZSwNCiAgICAibW91c2Vkb3duIjogdHJ1ZSwNCiAgICAibW91c2VlbnRlciI6IHRydWUsDQogICAgIm1vdXNlbGVhdmUiOiB0cnVlLA0KICAgICJtb3VzZW1vdmUiOiB0cnVlLA0KICAgICJtb3VzZW91dCI6IHRydWUsDQogICAgIm1vdXNlb3ZlciI6IHRydWUsDQogICAgIm1vdXNldXAiOiB0cnVlLA0KICAgICJwYXVzZSI6IHRydWUsDQogICAgInBsYXkiOiB0cnVlLA0KICAgICJwbGF5aW5nIjogdHJ1ZSwNCiAgICAicG9pbnRlcmNhbmNlbCI6IHRydWUsDQogICAgInBvaW50ZXJkb3duIjogZmFsc2UsDQogICAgInBvaW50ZXJlbnRlciI6IHRydWUsDQogICAgInBvaW50ZXJsZWF2ZSI6IHRydWUsDQogICAgInBvaW50ZXJtb3ZlIjogdHJ1ZSwNCiAgICAicG9pbnRlcm91dCI6IHRydWUsDQogICAgInBvaW50ZXJvdmVyIjogdHJ1ZSwNCiAgICAicG9pbnRlcnVwIjogZmFsc2UsDQogICAgInByb2dyZXNzIjogdHJ1ZSwNCiAgICAicmF0ZWNoYW5nZSI6IHRydWUsDQogICAgInJlc2V0IjogdHJ1ZSwNCiAgICAicmVzaXplIjogdHJ1ZSwNCiAgICAic2Nyb2xsIjogdHJ1ZSwNCiAgICAic2VjdXJpdHlwb2xpY3l2aW9sYXRpb24iOiB0cnVlLA0KICAgICJzZWVrZWQiOiB0cnVlLA0KICAgICJzZWVraW5nIjogdHJ1ZSwNCiAgICAic2VsZWN0IjogdHJ1ZSwNCiAgICAic2VsZWN0aW9uY2hhbmdlIjogdHJ1ZSwNCiAgICAic2VsZWN0c3RhcnQiOiB0cnVlLA0KICAgICJzbG90Y2hhbmdlIjogdHJ1ZSwNCiAgICAic3RhbGxlZCI6IHRydWUsDQogICAgInN1Ym1pdCI6IHRydWUsDQogICAgInN1c3BlbmQiOiB0cnVlLA0KICAgICJ0aW1ldXBkYXRlIjogdHJ1ZSwNCiAgICAidG9nZ2xlIjogdHJ1ZSwNCiAgICAidG91Y2hjYW5jZWwiOiB0cnVlLA0KICAgICJ0b3VjaGVuZCI6IHRydWUsDQogICAgInRvdWNobW92ZSI6IHRydWUsDQogICAgInRvdWNoc3RhcnQiOiB0cnVlLA0KICAgICJ0cmFuc2l0aW9uY2FuY2VsIjogdHJ1ZSwNCiAgICAidHJhbnNpdGlvbmVuZCI6IHRydWUsDQogICAgInRyYW5zaXRpb25ydW4iOiB0cnVlLA0KICAgICJ0cmFuc2l0aW9uc3RhcnQiOiB0cnVlLA0KICAgICJ2b2x1bWVjaGFuZ2UiOiB0cnVlLA0KICAgICJ3YWl0aW5nIjogdHJ1ZSwNCiAgICAid2Via2l0YW5pbWF0aW9uZW5kIjogdHJ1ZSwNCiAgICAid2Via2l0YW5pbWF0aW9uaXRlcmF0aW9uIjogdHJ1ZSwNCiAgICAid2Via2l0YW5pbWF0aW9uc3RhcnQiOiB0cnVlLA0KICAgICJ3ZWJraXR0cmFuc2l0aW9uZW5kIjogdHJ1ZSwNCiAgICAid2hlZWwiOiB0cnVlLA0KICAgICJhZnRlcnByaW50IjogdHJ1ZSwNCiAgICAiYmVmb3JlcHJpbnQiOiB0cnVlLA0KICAgICJiZWZvcmV1bmxvYWQiOiB0cnVlLA0KICAgICJnYW1lcGFkY29ubmVjdGVkIjogdHJ1ZSwNCiAgICAiZ2FtZXBhZGRpc2Nvbm5lY3RlZCI6IHRydWUsDQogICAgImhhc2hjaGFuZ2UiOiB0cnVlLA0KICAgICJsYW5ndWFnZWNoYW5nZSI6IHRydWUsDQogICAgIm1lc3NhZ2UiOiB0cnVlLA0KICAgICJtZXNzYWdlZXJyb3IiOiB0cnVlLA0KICAgICJvZmZsaW5lIjogdHJ1ZSwNCiAgICAib25saW5lIjogdHJ1ZSwNCiAgICAicGFnZWhpZGUiOiB0cnVlLA0KICAgICJwYWdlc2hvdyI6IHRydWUsDQogICAgInBvcHN0YXRlIjogdHJ1ZSwNCiAgICAicmVqZWN0aW9uaGFuZGxlZCI6IHRydWUsDQogICAgInN0b3JhZ2UiOiB0cnVlLA0KICAgICJ1bmhhbmRsZWRyZWplY3Rpb24iOiB0cnVlLA0KICAgICJ1bmxvYWQiOiB0cnVlLA0KICAgICJET01Db250ZW50TG9hZGVkIjogdHJ1ZSwNCiAgICAiZGV2aWNlbW90aW9uIjogdHJ1ZSwNCiAgICAiZGV2aWNlb3JpZW50YXRpb24iOiB0cnVlLA0KICAgICJvcmllbnRhdGlvbmNoYW5nZSI6IHRydWUNCn0=", "extensions.json": "ew0KICAgICJ0eHQiOiAidW5kZWZpbmVkIg0KfQ==", "htmlEvents.json": "ew0KICAgICJvbmFib3J0IjogdHJ1ZSwNCiAgICAib25hbmltYXRpb25jYW5jZWwiOiB0cnVlLA0KICAgICJvbmFuaW1hdGlvbmVuZCI6IHRydWUsDQogICAgIm9uYW5pbWF0aW9uaXRlcmF0aW9uIjogdHJ1ZSwNCiAgICAib25hbmltYXRpb25zdGFydCI6IHRydWUsDQogICAgIm9uYXV4Y2xpY2siOiB0cnVlLA0KICAgICJvbmJsdXIiOiB0cnVlLA0KICAgICJvbmNhbnBsYXkiOiB0cnVlLA0KICAgICJvbmNhbnBsYXl0aHJvdWdoIjogdHJ1ZSwNCiAgICAib25jaGFuZ2UiOiB0cnVlLA0KICAgICJvbmNsaWNrIjogdHJ1ZSwNCiAgICAib25jbG9zZSI6IHRydWUsDQogICAgIm9uY29udGV4dG1lbnUiOiB0cnVlLA0KICAgICJvbmN1ZWNoYW5nZSI6IHRydWUsDQogICAgIm9uZGJsY2xpY2siOiB0cnVlLA0KICAgICJvbmRyYWciOiB0cnVlLA0KICAgICJvbmRyYWdlbmQiOiB0cnVlLA0KICAgICJvbmRyYWdlbnRlciI6IHRydWUsDQogICAgIm9uZHJhZ2xlYXZlIjogdHJ1ZSwNCiAgICAib25kcmFnb3ZlciI6IHRydWUsDQogICAgIm9uZHJhZ3N0YXJ0IjogdHJ1ZSwNCiAgICAib25kcm9wIjogdHJ1ZSwNCiAgICAib25kdXJhdGlvbmNoYW5nZSI6IHRydWUsDQogICAgIm9uZW1wdGllZCI6IHRydWUsDQogICAgIm9uZW5kZWQiOiB0cnVlLA0KICAgICJvbmVycm9yIjogdHJ1ZSwNCiAgICAib25mb2N1cyI6IHRydWUsDQogICAgIm9uZm9ybWRhdGEiOiB0cnVlLA0KICAgICJvbmdvdHBvaW50ZXJjYXB0dXJlIjogdHJ1ZSwNCiAgICAib25pbnB1dCI6IHRydWUsDQogICAgIm9uaW52YWxpZCI6IHRydWUsDQogICAgIm9ua2V5ZG93biI6IHRydWUsDQogICAgIm9ua2V5cHJlc3MiOiB0cnVlLA0KICAgICJvbmtleXVwIjogdHJ1ZSwNCiAgICAib25sb2FkIjogdHJ1ZSwNCiAgICAib25sb2FkZWRkYXRhIjogdHJ1ZSwNCiAgICAib25sb2FkZWRtZXRhZGF0YSI6IHRydWUsDQogICAgIm9ubG9hZHN0YXJ0IjogdHJ1ZSwNCiAgICAib25sb3N0cG9pbnRlcmNhcHR1cmUiOiB0cnVlLA0KICAgICJvbm1vdXNlZG93biI6IHRydWUsDQogICAgIm9ubW91c2VlbnRlciI6IHRydWUsDQogICAgIm9ubW91c2VsZWF2ZSI6IHRydWUsDQogICAgIm9ubW91c2Vtb3ZlIjogdHJ1ZSwNCiAgICAib25tb3VzZW91dCI6IHRydWUsDQogICAgIm9ubW91c2VvdmVyIjogdHJ1ZSwNCiAgICAib25tb3VzZXVwIjogdHJ1ZSwNCiAgICAib25wYXVzZSI6IHRydWUsDQogICAgIm9ucGxheSI6IHRydWUsDQogICAgIm9ucGxheWluZyI6IHRydWUsDQogICAgIm9ucG9pbnRlcmNhbmNlbCI6IHRydWUsDQogICAgIm9ucG9pbnRlcmRvd24iOiB0cnVlLA0KICAgICJvbnBvaW50ZXJlbnRlciI6IHRydWUsDQogICAgIm9ucG9pbnRlcmxlYXZlIjogdHJ1ZSwNCiAgICAib25wb2ludGVybW92ZSI6IHRydWUsDQogICAgIm9ucG9pbnRlcm91dCI6IHRydWUsDQogICAgIm9ucG9pbnRlcm92ZXIiOiB0cnVlLA0KICAgICJvbnBvaW50ZXJ1cCI6IHRydWUsDQogICAgIm9ucHJvZ3Jlc3MiOiB0cnVlLA0KICAgICJvbnJhdGVjaGFuZ2UiOiB0cnVlLA0KICAgICJvbnJlc2V0IjogdHJ1ZSwNCiAgICAib25yZXNpemUiOiB0cnVlLA0KICAgICJvbnNjcm9sbCI6IHRydWUsDQogICAgIm9uc2VjdXJpdHlwb2xpY3l2aW9sYXRpb24iOiB0cnVlLA0KICAgICJvbnNlZWtlZCI6IHRydWUsDQogICAgIm9uc2Vla2luZyI6IHRydWUsDQogICAgIm9uc2VsZWN0IjogdHJ1ZSwNCiAgICAib25zZWxlY3Rpb25jaGFuZ2UiOiB0cnVlLA0KICAgICJvbnNlbGVjdHN0YXJ0IjogdHJ1ZSwNCiAgICAib25zbG90Y2hhbmdlIjogdHJ1ZSwNCiAgICAib25zdGFsbGVkIjogdHJ1ZSwNCiAgICAib25zdWJtaXQiOiB0cnVlLA0KICAgICJvbnN1c3BlbmQiOiB0cnVlLA0KICAgICJvbnRpbWV1cGRhdGUiOiB0cnVlLA0KICAgICJvbnRvZ2dsZSI6IHRydWUsDQogICAgIm9udG91Y2hjYW5jZWwiOiB0cnVlLA0KICAgICJvbnRvdWNoZW5kIjogdHJ1ZSwNCiAgICAib250b3VjaG1vdmUiOiB0cnVlLA0KICAgICJvbnRvdWNoc3RhcnQiOiB0cnVlLA0KICAgICJvbnRyYW5zaXRpb25jYW5jZWwiOiB0cnVlLA0KICAgICJvbnRyYW5zaXRpb25lbmQiOiB0cnVlLA0KICAgICJvbnRyYW5zaXRpb25ydW4iOiB0cnVlLA0KICAgICJvbnRyYW5zaXRpb25zdGFydCI6IHRydWUsDQogICAgIm9udm9sdW1lY2hhbmdlIjogdHJ1ZSwNCiAgICAib253YWl0aW5nIjogdHJ1ZSwNCiAgICAib253ZWJraXRhbmltYXRpb25lbmQiOiB0cnVlLA0KICAgICJvbndlYmtpdGFuaW1hdGlvbml0ZXJhdGlvbiI6IHRydWUsDQogICAgIm9ud2Via2l0YW5pbWF0aW9uc3RhcnQiOiB0cnVlLA0KICAgICJvbndlYmtpdHRyYW5zaXRpb25lbmQiOiB0cnVlDQp9", "programs.json": "ew0KICAgICJleHBsb3JlciI6IHsNCiAgICAgICAgIm5hbWUiOiAiRXhwbG9yZXIiLA0KICAgICAgICAicGF0aCI6ICJjL3Byb2dyYW1zL2V4cGxvcmVyL21haW4uanMiDQogICAgfQ0KfQ==", "startMenu.json": "ew0KICAgICJ0ZXN0IjoiYy9wcm9ncmFtcy90ZXN0U2NyaXB0L3J1bi5qcyIsDQogICAgInJlc2V0IjoiYy9zeXMvZnVuY3Rpb25zL3Jlc2V0LmpzIg0KfQ==", "startup.json": "ew0KICAgIA0KfQ=="}, "sys.js": ""}}