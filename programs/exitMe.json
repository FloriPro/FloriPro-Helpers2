{"gui": {"elementFunctions": {"core.js": ""}, "projectEditor.js": "", "ribbon": {"add.js": "bmV3IChjbGFzcyB7DQogICAgY29uc3RydWN0b3IoKSB7DQogICAgfQ0KICAgIGdldE5hbWUoKSB7DQogICAgICAgIHJldHVybiAiRWxlbWVudHMiOw0KICAgIH0NCiAgICBnZXRGdW5jdGlvbnMoKSB7DQogICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAidGV4dCI6IHsgInR5cGUiOiAiYnV0dG9uIiwgImNoYW5nZSI6IHRoaXMudGV4dCB9LA0KICAgICAgICAgICAgImJveCI6IHsgInR5cGUiOiAiYnV0dG9uIiwgImNoYW5nZSI6IHRoaXMuYm94IH0sDQogICAgICAgICAgICAiY2lyY2xlIjogeyAidHlwZSI6ICJidXR0b24iLCAiY2hhbmdlIjogdGhpcy5jaXJjbGUgfSwNCiAgICAgICAgICAgICJidXR0b24iOiB7ICJ0eXBlIjogImJ1dHRvbiIsICJjaGFuZ2UiOiB0aGlzLmJ1dHRvbiB9LA0KICAgICAgICAgICAgImltYWdlIjogeyAidHlwZSI6ICJidXR0b24iLCAiY2hhbmdlIjogdGhpcy5pbWFnZSB9LA0KICAgICAgICAgICAgIndlYnNpdGUiOiB7ICJ0eXBlIjogImJ1dHRvbiIsICJjaGFuZ2UiOiB0aGlzLndlYnNpdGUgfSwNCiAgICAgICAgfQ0KICAgIH0NCiAgICAvKioNCiAgICAgKiANCiAgICAgKiBAcGFyYW0ge2V4aXRNZV9ndWlfcHJvamVjdEVkaXRvcn0gZWRpdG9yIA0KICAgICAqLw0KICAgIGFzeW5jIHRleHQoZWRpdG9yKSB7DQogICAgICAgIGVkaXRvci5jcmVhdGVFbGVtZW50KHsNCiAgICAgICAgICAgICJ0eXBlIjogInRleHQiLA0KICAgICAgICAgICAgImRhdGEiOiAiVGV4dCIsDQogICAgICAgICAgICAicG9zIjogew0KICAgICAgICAgICAgICAgIHg6IDEwLA0KICAgICAgICAgICAgICAgIHk6IDEwDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgInNpemUiOiB7DQogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCwNCiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJzdHlsaW5nIjogew0KICAgICAgICAgICAgICAgICJmb250U2l6ZSI6IDQwLA0KICAgICAgICAgICAgICAgICJmb250RmFtaWx5IjogIkFyaWFsIiwNCiAgICAgICAgICAgICAgICAiY29sb3IiOiAiIzAwMDAwMGZmIiwNCiAgICAgICAgICAgICAgICAiYmFja2dyb3VuZENvbG9yIjogIiMwMDAwMDAwMCINCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KICAgIGFzeW5jIGJveChlZGl0b3IpIHsNCiAgICAgICAgZWRpdG9yLmNyZWF0ZUVsZW1lbnQoew0KICAgICAgICAgICAgInR5cGUiOiAiYm94IiwNCiAgICAgICAgICAgICJkYXRhIjogbnVsbCwNCiAgICAgICAgICAgICJwb3MiOiB7DQogICAgICAgICAgICAgICAgeDogMTAsDQogICAgICAgICAgICAgICAgeTogMTANCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAic2l6ZSI6IHsNCiAgICAgICAgICAgICAgICB3aWR0aDogMTAwLA0KICAgICAgICAgICAgICAgIGhlaWdodDogMTAwDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgInN0eWxpbmciOiB7DQogICAgICAgICAgICAgICAgImJhY2tncm91bmRDb2xvciI6ICIjZmYwMDAwZmYiLA0KICAgICAgICAgICAgICAgICJib3JkZXIiOiAiMiIsDQogICAgICAgICAgICAgICAgImJvcmRlckNvbG9yIjogIiMwMDAwMDBmZiIsDQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgIH0NCiAgICBhc3luYyBjaXJjbGUoZWRpdG9yKSB7DQogICAgICAgIGVkaXRvci5jcmVhdGVFbGVtZW50KHsNCiAgICAgICAgICAgICJ0eXBlIjogImNpcmNsZSIsDQogICAgICAgICAgICAiZGF0YSI6IG51bGwsDQogICAgICAgICAgICAicG9zIjogew0KICAgICAgICAgICAgICAgIHg6IDEwLA0KICAgICAgICAgICAgICAgIHk6IDEwDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgInNpemUiOiB7DQogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCwNCiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJzdHlsaW5nIjogew0KICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kQ29sb3IiOiAiIzAwZmYwMGZmIiwNCiAgICAgICAgICAgICAgICAiYm9yZGVyIjogIjIiLA0KICAgICAgICAgICAgICAgICJib3JkZXJDb2xvciI6ICIjMDAwMDAwZmYiLA0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICB9DQogICAgYXN5bmMgYnV0dG9uKCkgew0KICAgICAgICBjb25zb2xlLndhcm4oImJ1dHRvbiBub3QgaW1wbGVtZW50ZWQiKTsNCiAgICB9DQogICAgYXN5bmMgaW1hZ2UoZWRpdG9yKSB7DQogICAgICAgIGVkaXRvci5jcmVhdGVFbGVtZW50KHsNCiAgICAgICAgICAgICJ0eXBlIjogImltYWdlIiwNCiAgICAgICAgICAgICJkYXRhIjogImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vaW1hZ2VzL2JyYW5kaW5nL2dvb2dsZWxvZ28vMngvZ29vZ2xlbG9nb19jb2xvcl8yNzJ4OTJkcC5wbmciLA0KICAgICAgICAgICAgInBvcyI6IHsNCiAgICAgICAgICAgICAgICB4OiAxMCwNCiAgICAgICAgICAgICAgICB5OiAxMA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJzaXplIjogew0KICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAsDQogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDANCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAic3R5bGluZyI6IHsNCiAgICAgICAgICAgICAgICAiY29uc2lzdGVudFNpemUiOiBmYWxzZSwNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgfQ0KICAgIGFzeW5jIHdlYnNpdGUoKSB7DQogICAgICAgIGNvbnNvbGUud2Fybigid2Vic2l0ZSBub3QgaW1wbGVtZW50ZWQiKTsNCiAgICB9DQp9KSgpOw==", "edit.js": "bmV3IChjbGFzcyB7DQogICAgY29uc3RydWN0b3IoKSB7DQogICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7DQogICAgfQ0KICAgIGdldE5hbWUoKSB7DQogICAgICAgIHJldHVybiAiRWRpdCI7DQogICAgfQ0KICAgIC8qKg0KICAgICAqIEBwYXJhbSB7e3R5cGU6c3RyaW5nLCBkYXRhOnN0cmluZ3xhbnksIHBvczp7eDpudW1iZXIseTpudW1iZXJ9LCBzaXplOnt3aWR0aDpudW1iZXIsaGVpZ2h0Om51bWJlcn0sIHN0eWxpbmc6YW55fX0gZWxlbWVudA0KICAgICAqLw0KICAgIGdldEZ1bmN0aW9ucyhlbGVtZW50KSB7DQogICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7DQoNCiAgICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkgew0KICAgICAgICAgICAgcmV0dXJuIHt9Ow0KICAgICAgICB9DQogICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT0gInRleHQiKSB7DQogICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgICJmb250U2l6ZSI6IHsgInR5cGUiOiAibnVtYmVyIiwgImNoYW5nZSI6IHRoaXMuZm9udFNpemUuYmluZCh0aGlzKSwgImdldCI6IHRoaXMuZ2V0Rm9udFNpemUuYmluZCh0aGlzKSB9LA0KICAgICAgICAgICAgICAgICJmb250RmFtaWx5IjogeyAidHlwZSI6ICJ0ZXh0IiwgImNoYW5nZSI6IHRoaXMuZm9udEZhbWlseS5iaW5kKHRoaXMpLCAiZ2V0IjogdGhpcy5nZXRGb250RmFtaWx5LmJpbmQodGhpcykgfSwNCiAgICAgICAgICAgICAgICAiY29sb3IiOiB7ICJ0eXBlIjogImNvbG9yIiwgImNoYW5nZSI6IHRoaXMuY29sb3IuYmluZCh0aGlzKSwgImdldCI6IHRoaXMuZ2V0Q29sb3IuYmluZCh0aGlzKSB9LA0KICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kQ29sb3IiOiB7ICJ0eXBlIjogImNvbG9yIiwgImNoYW5nZSI6IHRoaXMuYmFja2dyb3VuZENvbG9yLmJpbmQodGhpcyksICJnZXQiOiB0aGlzLmdldEJhY2tncm91bmRDb2xvci5iaW5kKHRoaXMpIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnR5cGUgPT0gImltYWdlIikgew0KICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICAiSW1hZ2UiOiB7ICJ0eXBlIjogImZpbGUiLCAiY2hhbmdlIjogdGhpcy5pbWFnZVNyYy5iaW5kKHRoaXMpLCAiZ2V0IjogdGhpcy5nZXRJbWFnZS5iaW5kKHRoaXMpIH0sDQogICAgICAgICAgICAgICAgIkltYWdlIFVybCI6IHsgInR5cGUiOiAic3RyaW5nQXNrIiwgImNoYW5nZSI6IHRoaXMuaW1hZ2VVcmwuYmluZCh0aGlzKSwgImdldCI6IHRoaXMuZ2V0SW1hZ2UuYmluZCh0aGlzKSB9LA0KICAgICAgICAgICAgICAgICJDb25zaXN0ZW50IFNpemUiOiB7ICJ0eXBlIjogImNoZWNrYm94IiwgImNoYW5nZSI6IHRoaXMuaW1hZ2VDb25zaXN0ZW50U2l6ZS5iaW5kKHRoaXMpLCAiZ2V0IjogdGhpcy5nZXRJbWFnZUNvbnNpc3RlbnRTaXplLmJpbmQodGhpcykgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnR5cGUgPT0gImJveCIgfHwgZWxlbWVudC50eXBlID09ICJjaXJjbGUiKSB7DQogICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgICJDb2xvciI6IHsgInR5cGUiOiAiY29sb3IiLCAiY2hhbmdlIjogdGhpcy5iYWNrZ3JvdW5kQ29sb3IuYmluZCh0aGlzKSwgImdldCI6IHRoaXMuZ2V0QmFja2dyb3VuZENvbG9yLmJpbmQodGhpcykgfSwNCiAgICAgICAgICAgICAgICAiQm9yZGVyIjogeyAidHlwZSI6ICJudW1iZXIiLCAiY2hhbmdlIjogdGhpcy5ib3JkZXIuYmluZCh0aGlzKSwgImdldCI6IHRoaXMuZ2V0Qm9yZGVyLmJpbmQodGhpcykgfSwNCiAgICAgICAgICAgICAgICAiQm9yZGVyQ29sb3IiOiB7ICJ0eXBlIjogImNvbG9yIiwgImNoYW5nZSI6IHRoaXMuYm9yZGVyQ29sb3IuYmluZCh0aGlzKSwgImdldCI6IHRoaXMuZ2V0Qm9yZGVyQ29sb3IuYmluZCh0aGlzKSB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICByZXR1cm4ge307DQogICAgICAgIH0NCiAgICB9DQogICAgZ2V0Rm9udFNpemUoKSB7DQogICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc3R5bGluZy5mb250U2l6ZTsNCiAgICB9DQogICAgZ2V0Rm9udEZhbWlseSgpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdHlsaW5nLmZvbnRGYW1pbHk7DQogICAgfQ0KICAgIGdldENvbG9yKCkgew0KICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LnN0eWxpbmcuY29sb3I7DQogICAgfQ0KICAgIGdldEJhY2tncm91bmRDb2xvcigpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdHlsaW5nLmJhY2tncm91bmRDb2xvcjsNCiAgICB9DQogICAgLyoqDQogICAgICogQHBhcmFtIHtleGl0TWVfZ3VpX3Byb2plY3RFZGl0b3J9IGVkaXRvcg0KICAgICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gZWxlbWVudCANCiAgICAgKi8NCiAgICBmb250U2l6ZShlZGl0b3IsIGVsZW1lbnQpIHsNCiAgICAgICAgZWRpdG9yLmVsZW1lbnRzW2VkaXRvci5ub3dFZGl0aW5nXS5zdHlsaW5nLmZvbnRTaXplID0gZWxlbWVudC52YWx1ZTsNCiAgICAgICAgZWRpdG9yLnJlbG9hZEVsZW1lbnQoZWRpdG9yLm5vd0VkaXRpbmcpOw0KICAgIH0NCiAgICAvKioNCiAgICAgKiBAcGFyYW0ge2V4aXRNZV9ndWlfcHJvamVjdEVkaXRvcn0gZWRpdG9yIA0KICAgICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gZWxlbWVudCANCiAgICAgKi8NCiAgICBmb250RmFtaWx5KGVkaXRvciwgZWxlbWVudCkgew0KICAgICAgICBlZGl0b3IuZWxlbWVudHNbZWRpdG9yLm5vd0VkaXRpbmddLnN0eWxpbmcuZm9udEZhbWlseSA9IGVsZW1lbnQudmFsdWU7DQogICAgICAgIGVkaXRvci5yZWxvYWRFbGVtZW50KGVkaXRvci5ub3dFZGl0aW5nKTsNCiAgICB9DQogICAgLyoqDQogICAgICogQHBhcmFtIHtleGl0TWVfZ3VpX3Byb2plY3RFZGl0b3J9IGVkaXRvciANCiAgICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGVsZW1lbnQgDQogICAgICovDQogICAgY29sb3IoZWRpdG9yLCBjb2xvcikgew0KICAgICAgICBlZGl0b3IuZWxlbWVudHNbZWRpdG9yLm5vd0VkaXRpbmddLnN0eWxpbmcuY29sb3IgPSBjb2xvcjsNCiAgICAgICAgZWRpdG9yLnJlbG9hZEVsZW1lbnQoZWRpdG9yLm5vd0VkaXRpbmcpOw0KICAgIH0NCiAgICAvKioNCiAgICAgKiBAcGFyYW0ge2V4aXRNZV9ndWlfcHJvamVjdEVkaXRvcn0gZWRpdG9yIA0KICAgICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gZWxlbWVudCANCiAgICAgKi8NCiAgICBiYWNrZ3JvdW5kQ29sb3IoZWRpdG9yLCBjb2xvcikgew0KICAgICAgICBlZGl0b3IuZWxlbWVudHNbZWRpdG9yLm5vd0VkaXRpbmddLnN0eWxpbmcuYmFja2dyb3VuZENvbG9yID0gY29sb3I7DQogICAgICAgIGVkaXRvci5yZWxvYWRFbGVtZW50KGVkaXRvci5ub3dFZGl0aW5nKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0ge2V4aXRNZV9ndWlfcHJvamVjdEVkaXRvcn0gZWRpdG9yDQogICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVQYXRoDQogICAgICovDQogICAgYXN5bmMgaW1hZ2VTcmMoZWRpdG9yLCBmaWxlUGF0aCkgew0KICAgICAgICBlZGl0b3IuZWxlbWVudHNbZWRpdG9yLm5vd0VkaXRpbmddLmRhdGEgPSBTeXN0ZW1GaWxlU3lzdGVtLnRvSW1nKGF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uZ2V0RmlsZVN0cmluZyhmaWxlUGF0aCkpOw0KICAgICAgICBlZGl0b3IuZWxlbWVudHNbZWRpdG9yLm5vd0VkaXRpbmddLnBhdGggPSBmaWxlUGF0aDsNCiAgICAgICAgZWRpdG9yLnJlbG9hZEVsZW1lbnQoZWRpdG9yLm5vd0VkaXRpbmcpOw0KICAgIH0NCg0KICAgIGFzeW5jIGltYWdlVXJsKGVkaXRvciwgdXJsKSB7DQogICAgICAgIHZhciBuID0gYXdhaXQgU3lzdGVtLm5ldHdvcmsuaW5mb3JtYXRpb25hbEZldGNoX1RleHQodXJsKTsNCg0KICAgICAgICBlZGl0b3IuZWxlbWVudHNbZWRpdG9yLm5vd0VkaXRpbmddLmRhdGEgPSBTeXN0ZW1GaWxlU3lzdGVtLnRvSW1nKG4pOw0KICAgICAgICBlZGl0b3IuZWxlbWVudHNbZWRpdG9yLm5vd0VkaXRpbmddLnBhdGggPSAidXJsIjsNCiAgICAgICAgZWRpdG9yLnJlbG9hZEVsZW1lbnQoZWRpdG9yLm5vd0VkaXRpbmcpOw0KICAgIH0NCg0KICAgIGdldEltYWdlKCkgew0KICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LnBhdGg7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtIHtleGl0TWVfZ3VpX3Byb2plY3RFZGl0b3J9IGVkaXRvcg0KICAgICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gZWxlbWVudA0KICAgICAqLw0KICAgIGltYWdlQ29uc2lzdGVudFNpemUoZWRpdG9yLCBlbGVtZW50KSB7DQogICAgICAgIGVkaXRvci5lbGVtZW50c1tlZGl0b3Iubm93RWRpdGluZ10uc3R5bGluZy5jb25zaXN0ZW50U2l6ZSA9IGVsZW1lbnQuY2hlY2tlZDsNCiAgICAgICAgZWRpdG9yLnJlbG9hZEVsZW1lbnQoZWRpdG9yLm5vd0VkaXRpbmcpOw0KICAgIH0NCg0KICAgIGdldEltYWdlQ29uc2lzdGVudFNpemUoKSB7DQogICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc3R5bGluZy5jb25zaXN0ZW50U2l6ZTsNCiAgICB9DQogICAgYm9yZGVyKGVkaXRvciwgZWwpIHsNCiAgICAgICAgZWRpdG9yLmVsZW1lbnRzW2VkaXRvci5ub3dFZGl0aW5nXS5zdHlsaW5nLmJvcmRlciA9IGVsLnZhbHVlOw0KICAgICAgICBlZGl0b3IucmVsb2FkRWxlbWVudChlZGl0b3Iubm93RWRpdGluZyk7DQogICAgfQ0KICAgIGdldEJvcmRlcigpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdHlsaW5nLmJvcmRlcjsNCiAgICB9DQogICAgYm9yZGVyQ29sb3IoZWRpdG9yLCBjb2xvcikgew0KICAgICAgICBlZGl0b3IuZWxlbWVudHNbZWRpdG9yLm5vd0VkaXRpbmddLnN0eWxpbmcuYm9yZGVyQ29sb3IgPSBjb2xvcjsNCiAgICAgICAgZWRpdG9yLnJlbG9hZEVsZW1lbnQoZWRpdG9yLm5vd0VkaXRpbmcpOw0KICAgIH0NCiAgICBnZXRCb3JkZXJDb2xvcigpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdHlsaW5nLmJvcmRlckNvbG9yOw0KICAgIH0NCn0pKCk7", "file.js": "bmV3IChjbGFzcyB7DQogICAgY29uc3RydWN0b3IoKSB7DQogICAgfQ0KICAgIGdldE5hbWUoKSB7DQogICAgICAgIHJldHVybiAiZmlsZSI7DQogICAgfQ0KICAgIGdldEZ1bmN0aW9ucygpIHsNCiAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICJzYXZlUHJvamVjdCI6IHsgInR5cGUiOiAiYnV0dG9uIiwgImNoYW5nZSI6IHRoaXMuc2F2ZVByb2plY3QuYmluZCh0aGlzKSB9LA0KICAgICAgICAgICAgInNhdmVQcm9qZWN0QXMiOiB7ICJ0eXBlIjogImJ1dHRvbiIsICJjaGFuZ2UiOiB0aGlzLnNhdmVQcm9qZWN0QXMuYmluZCh0aGlzKSB9LA0KICAgICAgICAgICAgImNsb3NlUHJvamVjdCI6IHsgInR5cGUiOiAiYnV0dG9uIiwgImNoYW5nZSI6IHRoaXMuY2xvc2VQcm9qZWN0IH0sDQogICAgICAgICAgICAiZXhpdCI6IHsgInR5cGUiOiAiYnV0dG9uIiwgImNoYW5nZSI6IHRoaXMuZXhpdCB9LA0KICAgICAgICAgICAgInBpeGVsIHJhdGlvIjogeyAidHlwZSI6ICJ0ZXh0IiwgImNoYW5nZSI6IHRoaXMuc2V0UGl4ZWxSYXRpby5iaW5kKHRoaXMpLCAiZ2V0IjogdGhpcy5nZXRQaXhlbFJhdGlvIH0NCiAgICAgICAgfQ0KICAgIH0NCiAgICAvKioNCiAgICAgKiANCiAgICAgKiBAcGFyYW0ge2V4aXRNZV9ndWlfcHJvamVjdEVkaXRvcn0gZWRpdG9yIA0KICAgICAqLw0KICAgIGFzeW5jIHNhdmVQcm9qZWN0KGVkaXRvcikgew0KICAgICAgICB2YXIgeCA9IHRoaXMuZ2VuZXJhdGVTYXZlRmlsZShlZGl0b3IpOw0KICAgICAgICBTeXN0ZW1GaWxlU3lzdGVtLnNldEZpbGVTdHJpbmcoZWRpdG9yLnByb2plY3RQYXRoLCBKU09OLnN0cmluZ2lmeSh4KSk7DQogICAgfQ0KICAgIC8qKg0KICAgICAqIA0KICAgICAqIEBwYXJhbSB7ZXhpdE1lX2d1aV9wcm9qZWN0RWRpdG9yfSBlZGl0b3IgDQogICAgICovDQogICAgYXN5bmMgc2F2ZVByb2plY3RBcyhlZGl0b3IpIHsNCiAgICAgICAgY29uc29sZS53YXJuKCJzYXZlUHJvamVjdEFzIG5vdCBpbXBsZW1lbnRlZCIpOw0KICAgIH0NCiAgICAvKioNCiAgICAgKiANCiAgICAgKiBAcGFyYW0ge2V4aXRNZV9ndWlfcHJvamVjdEVkaXRvcn0gZWRpdG9yIA0KICAgICAqLw0KICAgIGFzeW5jIGNsb3NlUHJvamVjdChlZGl0b3IpIHsNCiAgICAgICAgY29uc29sZS53YXJuKCJjbG9zZVByb2plY3Qgbm90IGltcGxlbWVudGVkIik7DQogICAgfQ0KICAgIC8qKg0KICAgICAqIA0KICAgICAqIEBwYXJhbSB7ZXhpdE1lX2d1aV9wcm9qZWN0RWRpdG9yfSBlZGl0b3IgDQogICAgICovDQogICAgYXN5bmMgZXhpdChlZGl0b3IpIHsNCiAgICAgICAgY29uc29sZS53YXJuKCJleGl0IG5vdCBpbXBsZW1lbnRlZCIpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIA0KICAgICAqIEBwYXJhbSB7ZXhpdE1lX2d1aV9wcm9qZWN0RWRpdG9yfSBlZGl0b3INCiAgICAgKi8NCiAgICBnZW5lcmF0ZVNhdmVGaWxlKGVkaXRvcikgew0KICAgICAgICByZXR1cm4gZWRpdG9yLnNhdmVGaWxlOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSB7ZXhpdE1lX2d1aV9wcm9qZWN0RWRpdG9yfSBlZGl0b3INCiAgICAgKi8NCiAgICBzZXRQaXhlbFJhdGlvKGVkaXRvciwgZWxlbWVudCkgew0KICAgICAgICBlZGl0b3IuZ3VpLnByb2plY3QucGl4ZWxSYXRpbyA9IGVsZW1lbnQudmFsdWU7DQogICAgICAgIGVkaXRvci5ndWkubG9hZFByb2plY3RTZXR0aW5ncygpOw0KICAgIH0NCiAgICAvKioNCiAgICAgKiBAcGFyYW0ge2V4aXRNZV9ndWlfcmliYm9ufSByaWJib24NCiAgICAgKi8NCiAgICBnZXRQaXhlbFJhdGlvKHJpYmJvbikgew0KICAgICAgICByZXR1cm4gcmliYm9uLmVkaXRvci5ndWkucHJvamVjdC5waXhlbFJhdGlvOw0KICAgIH0NCn0pKCk7"}, "ribbon.js": ""}, "gui.js": "Y2xhc3MgZXhpdE1lX2d1aSBleHRlbmRzIFN5c3RlbS5wcm9ncmFtLmRlZmF1bHQgew0KICAgIC8qKg0KICAgICAqIA0KICAgICAqIEBwYXJhbSB7SHRtbFdpbmRvd30gd2luZG93IA0KICAgICAqLw0KICAgIGFzeW5jIGluaXQod2luZG93KSB7DQogICAgICAgIHRoaXMuZ2V0UGF0aCA9ICgpID0+IHsgfTsNCiAgICAgICAgdGhpcy50eXBlcyA9IFsicHJvamVjdENob29zZSIsICJwcm9qZWN0RWRpdCJdOw0KICAgICAgICB0aGlzLndpbmRvdyA9IHdpbmRvdzsNCg0KICAgICAgICB0aGlzLmxvYWRQcm9qZWN0ID0gKG5hbWUpID0+IHsgfTsNCiAgICAgICAgdGhpcy5zaG93KCJwcm9qZWN0Q2hvb3NlIik7DQoNCiAgICAgICAgdGhpcy5wcm9qZWN0ID0gbnVsbDsNCiAgICAgICAgdGhpcy5wYWdlID0gMDsNCg0KICAgICAgICAvKioNCiAgICAgICAgICogQHR5cGUge2V4aXRNZV9ndWlfcHJvamVjdEVkaXRvcn0NCiAgICAgICAgICovDQogICAgICAgIHRoaXMucHJvamVjdEVkaXRvciA9IGF3YWl0IFN5c3RlbS5wcm9ncmFtLnJ1blByb2dyYW0odGhpcy5QQVRILmZvbGRlcigpICsgIi9ndWkvcHJvamVjdEVkaXRvci5qcyIsIHRoaXMud2luZG93KTsNCiAgICAgICAgdGhpcy5wcm9qZWN0RWRpdG9yLmdldFBhdGggPSB0aGlzLmdldFBhdGguYmluZCh0aGlzKTsNCiAgICAgICAgdGhpcy5wcm9qZWN0RWRpdG9yLmdldFNhdmVGaWxlID0gdGhpcy5nZXRTYXZlRmlsZS5iaW5kKHRoaXMpOw0KICAgICAgICB0aGlzLnByb2plY3RFZGl0b3IuZ3VpID0gdGhpczsNCiAgICAgICAgdGhpcy5wcm9qZWN0RWRpdG9yLnNldFBhZ2UgPSB0aGlzLnNldFBhZ2UuYmluZCh0aGlzKTsNCg0KICAgICAgICAvKioNCiAgICAgICAgICogQHR5cGUge2V4aXRNZV9ndWlfcmliYm9ufQ0KICAgICAgICAgKi8NCiAgICAgICAgdGhpcy5yaWJib24gPSBhd2FpdCBTeXN0ZW0ucHJvZ3JhbS5ydW5Qcm9ncmFtKHRoaXMuUEFUSC5mb2xkZXIoKSArICIvZ3VpL3JpYmJvbi5qcyIsIFt0aGlzLndpbmRvdywgdGhpcy5wcm9qZWN0RWRpdG9yXSk7DQoNCiAgICAgICAgdGhpcy5wcm9qZWN0RWRpdG9yLnNlbGVjdCA9IHRoaXMucmliYm9uLnNldEVsZW1lbnQuYmluZCh0aGlzLnJpYmJvbik7DQogICAgfQ0KDQogICAgYXN5bmMgc2hvdyh0eXApIHsNCiAgICAgICAgZm9yICh2YXIgeCBvZiB0aGlzLnR5cGVzKSB7DQogICAgICAgICAgICBpZiAoeCA9PSB0eXApIHsNCiAgICAgICAgICAgICAgICAoYXdhaXQgdGhpcy53aW5kb3cuZ2V0SHRtbEVsZW1lbnQodHlwKSkuc3R5bGUuZGlzcGxheSA9ICIiOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAoYXdhaXQgdGhpcy53aW5kb3cuZ2V0SHRtbEVsZW1lbnQoeCkpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwcm9qZWN0cyANCiAgICAgKiBAcmV0dXJucyANCiAgICAgKi8NCiAgICBhc3luYyBzZXRQcm9qZWN0cyhwcm9qZWN0cykgew0KICAgICAgICB2YXIgYXZhaWxQcm9qZWN0cyA9IGF3YWl0IHRoaXMud2luZG93LmdldEh0bWxFbGVtZW50KCJhdmFpbFByb2plY3RzIik7DQogICAgICAgIGF2YWlsUHJvamVjdHMuaW5uZXJIVE1MID0gIiI7DQoNCiAgICAgICAgaWYgKHByb2plY3RzLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICBhdmFpbFByb2plY3RzLmlubmVySFRNTCA9ICI8cD48aT5ObyBwcm9qZWN0cyBmb3VuZDwvaT48L3A+IjsNCiAgICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQoNCiAgICAgICAgZm9yICh2YXIgeCBvZiBwcm9qZWN0cykgew0KICAgICAgICAgICAgdmFyIHByb2plY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsNCiAgICAgICAgICAgIHByb2plY3QuY2xhc3NOYW1lID0gInByb2plY3QiOw0KICAgICAgICAgICAgcHJvamVjdC5pbm5lclRleHQgPSB4Lm5hbWU7DQogICAgICAgICAgICBwcm9qZWN0Lm9uY2xpY2sgPSAoKSA9PiB7DQogICAgICAgICAgICAgICAgdGhpcy5sb2FkUHJvamVjdCh4Lm5hbWUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgYXZhaWxQcm9qZWN0cy5hcHBlbmRDaGlsZChwcm9qZWN0KTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGFzeW5jIGxvYWRJbnRvUHJvamVjdChwYXRoKSB7DQogICAgICAgIHRoaXMucHJvamVjdCA9IGF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uZ2V0RmlsZUpzb24ocGF0aCk7DQogICAgICAgIHRoaXMucGFnZSA9IDA7DQogICAgICAgIGF3YWl0IHRoaXMucHJvamVjdEVkaXRvci5sb2FkUHJvamVjdCh0aGlzLnByb2plY3QucGFnZXNbdGhpcy5wYWdlXSk7DQogICAgICAgIHRoaXMubG9hZFByb2plY3RTZXR0aW5ncygpOw0KICAgIH0NCg0KICAgIGFzeW5jIGxvYWRQcm9qZWN0U2V0dGluZ3MoKSB7DQogICAgICAgIHRoaXMucHJvamVjdEVkaXRvci5zZXRQaXhlbFJhdGlvKHRoaXMucHJvamVjdC5waXhlbFJhdGlvKTsNCiAgICB9DQoNCiAgICBnZXRTYXZlRmlsZSgpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdDsNCiAgICB9DQoNCiAgICBzZXRQYWdlKGVsZW1lbnRzKSB7DQogICAgICAgIHZhciBvdXQgPSBbXTsNCiAgICAgICAgZm9yICh2YXIgeCBvZiBPYmplY3QudmFsdWVzKGVsZW1lbnRzKSkgew0KICAgICAgICAgICAgZGVsZXRlIHhbImlkIl07DQogICAgICAgICAgICBvdXQucHVzaCh4KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRoaXMucHJvamVjdC5wYWdlc1t0aGlzLnBhZ2VdID0gb3V0Ow0KICAgIH0NCn0NCm5ldyBleGl0TWVfZ3VpKCk7", "html.html": "PGRpdiBlbGVtZW50PSJwcm9qZWN0Q2hvb3NlIj4NCiAgICA8aDE+Q2hvb3NlIGEgcHJvamVjdCB0byBlZGl0PC9oMT4NCiAgICA8ZGl2IGVsZW1lbnQ9ImF2YWlsUHJvamVjdHMiPg0KDQogICAgPC9kaXY+DQogICAgPGhyPg0KICAgIDxidXR0b24gZWxlbWVudD0ibmV3UHJvamVjdCI+TmV3IFByb2plY3Q8L2J1dHRvbj4NCjwvZGl2Pg0KPGRpdiBlbGVtZW50PSJwcm9qZWN0RWRpdCI+DQogICAgPGRpdiBlbGVtZW50PSJyaWJib25Db250cm9sbEJhciI+DQogICAgICAgIDxkaXYgZWxlbWVudD0idG9wQmFyIj4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgZWxlbWVudD0idG9vbFNlbGVjdCI+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KDQogICAgPGRpdiBlbGVtZW50PSJlZGl0b3IiPg0KICAgICAgICA8ZGl2IGVsZW1lbnQ9InBhZ2VTZWxlY3QiPg0KICAgICAgICAgICAgPGRpdiBlbGVtZW50PSJzbWFsbFBhZ2UiPg0KICAgICAgICAgICAgICAgIDxjYW52YXMgZWxlbWVudD0icGFnZVJlbmRlciI+PC9jYW52YXM+DQogICAgICAgICAgICAgICAgPHA+UGFnZSAxPC9wPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGVsZW1lbnQ9InByb2plY3RDb250ZW50V3JhcGVyIj4NCiAgICAgICAgICAgIDxkaXYgZWxlbWVudD0icHJvamVjdENvbnRlbnQiIHN0eWxlPSJ3aWR0aDogNTAwcHg7IGhlaWdodDogNTAwcHg7Ij4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBlbGVtZW50PSJjb250ZW50Q2hhbmdlciIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgc3R5bGU9ImJhY2tncm91bmQ6IHRyYW5zcGFyZW50O3dpZHRoOiAxMDAlO2JvcmRlcjogMDtoZWlnaHQ6IDEwMCU7ZGlzcGxheTogbm9uZTtwYWRkaW5nOiAwO3Jlc2l6ZTogbm9uZTsiDQogICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ9ImNvbnRlbnRDaGFuZ2VyQ2hhbmdlVGV4dCI+VWZmPC90ZXh0YXJlYT4NCiAgICAgICAgICAgICAgICA8ZGl2IGVsZW1lbnQ9ImNvbnRlbnRDaGFuZ2VyQm9yZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg==", "install.js": "YXN5bmMgZnVuY3Rpb24gcnVuKCkgew0KICAgIGF3YWl0IFN5c3RlbS5vcHRpb25zLmFkZFZhbHVlKCJwcm9ncmFtcyIsICJleGl0TWUiLCB7ICJwYXRoIjogImMvcHJvZ3JhbXMvZXhpdE1lL21haW4uanMiLCAibmFtZSI6ICJFeGl0IEdhbWUgVG9vbGtpdCIsICJydW4iOiAiYy9wcm9ncmFtcy9leGl0TWUvcnVuLmpzIiB9LCB0cnVlKTsNCiAgICBTeXN0ZW1IdG1sLnVwZGF0ZVN0YXJ0bWVudSgpDQoNCiAgICAvL2Rlc2t0b3Agc2hvcnRjdXQNCiAgICBpZiAoIWF3YWl0IFN5c3RlbUh0bWwuZGVza3RvcC5leGlzdHNMaW5rKCJjL3Byb2dyYW1zL2V4aXRNZS9ydW4uanMiKSl7DQogICAgICAgIGF3YWl0IFN5c3RlbUh0bWwuZGVza3RvcC5hZGRMaW5rKCJjL3Byb2dyYW1zL2V4aXRNZS9ydW4uanMiLCAiRXhpdCBHYW1lIFRvb2xraXQiLCAiYy9wcm9ncmFtcy9leGl0TWUvbG9nby53ZWJwIik7DQogICAgfQ0KICAgIHJldHVybiB0cnVlOw0KfQ0KcnVuKCk7", "installLocation.dat": "Yy9wcm9ncmFtcy9leGl0TWU=", "main.js": "Y2xhc3MgcHJvZ3JhbSBleHRlbmRzIFN5c3RlbS5wcm9ncmFtLmRlZmF1bHQgew0KICAgIGFzeW5jIGluaXQoKSB7DQogICAgICAgIC8qKg0KICAgICAgICAgKiBAdHlwZSB7SHRtbFdpbmRvd30NCiAgICAgICAgICovDQogICAgICAgIHRoaXMud2luZG93ID0gYXdhaXQgU3lzdGVtSHRtbC5XaW5kb3dIYW5kbGVyLmNyZWF0ZVdpbmRvdygiUHJlc2VudCBJVCEiLA0KICAgICAgICAgICAgLy9vbnJlYWR5Og0KICAgICAgICAgICAgYXN5bmMgKCkgPT4gew0KICAgICAgICAgICAgICAgIC8vc2V0IGh0bWwNCiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndpbmRvdy5zZXRDb250ZW50KCI8c3R5bGU+IiArIChhd2FpdCBTeXN0ZW1GaWxlU3lzdGVtLmdldEZpbGVTdHJpbmcodGhpcy5QQVRILmZvbGRlcigpICsgIi9zdHlsZS5jc3MiKSkucmVwbGFjZUFsbCgie3t3aW5kb3dJZH19IiwgdGhpcy53aW5kb3cuZ2V0SWQoKSkgKyAiPC9zdHlsZT4iICsgYXdhaXQgU3lzdGVtRmlsZVN5c3RlbS5nZXRGaWxlU3RyaW5nKHRoaXMuUEFUSC5mb2xkZXIoKSArICIvaHRtbC5odG1sIikpOw0KICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2luZG93LnNpemUuc2V0U2l6ZSgzMjAsIDQwMCkNCiAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5zaXplLnVzZXJDYW5SZXNpemUodHJ1ZSkNCg0KICAgICAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgICAgICAqIEB0eXBlIHtleGl0TWVfZ3VpfQ0KICAgICAgICAgICAgICAgICAqLw0KICAgICAgICAgICAgICAgIHRoaXMuZ3VpID0gYXdhaXQgU3lzdGVtLnByb2dyYW0ucnVuUHJvZ3JhbSh0aGlzLlBBVEguZm9sZGVyKCkgKyAiL2d1aS5qcyIsIHRoaXMud2luZG93KTsNCiAgICAgICAgICAgICAgICB0aGlzLmdldFByb2plY3RMaXN0KCk7DQoNCiAgICAgICAgICAgICAgICB0aGlzLmd1aS5sb2FkUHJvamVjdCA9IHRoaXMubG9hZFByb2plY3QuYmluZCh0aGlzKTsNCiAgICAgICAgICAgICAgICB0aGlzLmd1aS5nZXRQYXRoID0gdGhpcy5nZXRQYXRoLmJpbmQodGhpcyk7DQoNCiAgICAgICAgICAgICAgICAvL3NldCBldmVudHMNCiAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5hZGRIdG1sRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAibmV3UHJvamVjdCIsIGFzeW5jICgpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBhd2FpdCBTeXN0ZW1IdG1sLldpbmRvd0hhbmRsZXIucHJlc2V0cy5jcmVhdGVTdHJpbmdTZWxlY3QoIk5ldyBQcm9qZWN0IiwgIkVudGVyIGEgbmFtZSBmb3IgdGhlIG5ldyBwcm9qZWN0Iik7DQogICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09IG51bGwpIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT0gIiIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN5c3RlbUh0bWwuV2luZG93SGFuZGxlci5wcmVzZXRzLmNyZWF0ZUluZm9ybWF0aW9uKCJFcnJvciIsICJQcm9qZWN0IG5hbWUgY2FuJ3QgYmUgZW1wdHkiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAobmFtZS5pbmNsdWRlcygiLyIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBTeXN0ZW1IdG1sLldpbmRvd0hhbmRsZXIucHJlc2V0cy5jcmVhdGVJbmZvcm1hdGlvbigiRXJyb3IiLCAiUHJvamVjdCBuYW1lIGNhbid0IGNvbnRhaW4gJy8nIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUuaW5jbHVkZXMoIlxcIikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN5c3RlbUh0bWwuV2luZG93SGFuZGxlci5wcmVzZXRzLmNyZWF0ZUluZm9ybWF0aW9uKCJFcnJvciIsICJQcm9qZWN0IG5hbWUgY2FuJ3QgY29udGFpbiAnXFwnIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUuaW5jbHVkZXMoIjoiKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3lzdGVtSHRtbC5XaW5kb3dIYW5kbGVyLnByZXNldHMuY3JlYXRlSW5mb3JtYXRpb24oIkVycm9yIiwgIlByb2plY3QgbmFtZSBjYW4ndCBjb250YWluICc6JyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChuYW1lLmluY2x1ZGVzKCIqIikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN5c3RlbUh0bWwuV2luZG93SGFuZGxlci5wcmVzZXRzLmNyZWF0ZUluZm9ybWF0aW9uKCJFcnJvciIsICJQcm9qZWN0IG5hbWUgY2FuJ3QgY29udGFpbiAnKiciKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAobmFtZS5pbmNsdWRlcygiPyIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBTeXN0ZW1IdG1sLldpbmRvd0hhbmRsZXIucHJlc2V0cy5jcmVhdGVJbmZvcm1hdGlvbigiRXJyb3IiLCAiUHJvamVjdCBuYW1lIGNhbid0IGNvbnRhaW4gJz8nIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUuaW5jbHVkZXMoIlwiIikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN5c3RlbUh0bWwuV2luZG93SGFuZGxlci5wcmVzZXRzLmNyZWF0ZUluZm9ybWF0aW9uKCJFcnJvciIsICJQcm9qZWN0IG5hbWUgY2FuJ3QgY29udGFpbiAnXCInIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUuaW5jbHVkZXMoIjwiKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3lzdGVtSHRtbC5XaW5kb3dIYW5kbGVyLnByZXNldHMuY3JlYXRlSW5mb3JtYXRpb24oIkVycm9yIiwgIlByb2plY3QgbmFtZSBjYW4ndCBjb250YWluICc8JyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChuYW1lLmluY2x1ZGVzKCI+IikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN5c3RlbUh0bWwuV2luZG93SGFuZGxlci5wcmVzZXRzLmNyZWF0ZUluZm9ybWF0aW9uKCJFcnJvciIsICJQcm9qZWN0IG5hbWUgY2FuJ3QgY29udGFpbiAnPiciKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBpZiAobmFtZS5pbmNsdWRlcygifCIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBTeXN0ZW1IdG1sLldpbmRvd0hhbmRsZXIucHJlc2V0cy5jcmVhdGVJbmZvcm1hdGlvbigiRXJyb3IiLCAiUHJvamVjdCBuYW1lIGNhbid0IGNvbnRhaW4gJ3wnIik7DQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUuaW5jbHVkZXMoIi4iKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgU3lzdGVtSHRtbC5XaW5kb3dIYW5kbGVyLnByZXNldHMuY3JlYXRlSW5mb3JtYXRpb24oIkVycm9yIiwgIlByb2plY3QgbmFtZSBjYW4ndCBjb250YWluICcuJyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGlmIChuYW1lLmluY2x1ZGVzKCIgIikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIFN5c3RlbUh0bWwuV2luZG93SGFuZGxlci5wcmVzZXRzLmNyZWF0ZUluZm9ybWF0aW9uKCJFcnJvciIsICJQcm9qZWN0IG5hbWUgY2FuJ3QgY29udGFpbiAnICciKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB2YXIgcHJvamVjdHMgPSBhd2FpdCBTeXN0ZW1GaWxlU3lzdGVtLmdldEZpbGVKc29uKHRoaXMuUEFUSC5mb2xkZXIoKSArICIvcHJvamVjdHMuanNvbiIpOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb2plY3RzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvamVjdHNbaV0ubmFtZSA9PSBuYW1lKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3lzdGVtSHRtbC5XaW5kb3dIYW5kbGVyLnByZXNldHMuY3JlYXRlSW5mb3JtYXRpb24oIkVycm9yIiwgIlByb2plY3QgbmFtZSBhbHJlYWR5IGV4aXN0cyIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHByb2plY3RzLnB1c2goew0KICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IHRoaXMuUEFUSC5mb2xkZXIoKSArICIvcHJvamVjdHMvIiArIG5hbWUNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIGF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uc2V0RmlsZVN0cmluZyh0aGlzLlBBVEguZm9sZGVyKCkgKyAiL3Byb2plY3RzLmpzb24iLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpOw0KICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmdldFByb2plY3RMaXN0KCk7DQogICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB0aGlzLndpbmRvdy5jbG9zZSA9ICgpID0+IHsNCiAgICAgICAgICAgIHRoaXMuc3RvcCgpDQogICAgICAgICAgICByZXR1cm4gdHJ1ZQ0KICAgICAgICB9DQogICAgfQ0KICAgIGFzeW5jIGdldFByb2plY3RMaXN0KCkgew0KICAgICAgICB0aGlzLmd1aS5zaG93KCJwcm9qZWN0Q2hvb3NlIikNCiAgICAgICAgaWYgKCFhd2FpdCBTeXN0ZW1GaWxlU3lzdGVtLmZpbGVFeGlzdHModGhpcy5QQVRILmZvbGRlcigpICsgIi9wcm9qZWN0cy5qc29uIikpIHsNCiAgICAgICAgICAgIGF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uc2V0RmlsZVN0cmluZyh0aGlzLlBBVEguZm9sZGVyKCkgKyAiL3Byb2plY3RzLmpzb24iLCAiW10iKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBwcm9qZWN0cyA9IGF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uZ2V0RmlsZUpzb24odGhpcy5QQVRILmZvbGRlcigpICsgIi9wcm9qZWN0cy5qc29uIik7DQoNCiAgICAgICAgdGhpcy5wcm9qZWN0cyA9IHt9Ow0KICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb2plY3RzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICB0aGlzLnByb2plY3RzW3Byb2plY3RzW2ldLm5hbWVdID0gcHJvamVjdHNbaV07DQogICAgICAgIH0NCg0KICAgICAgICBhd2FpdCB0aGlzLmd1aS5zZXRQcm9qZWN0cyhwcm9qZWN0cyk7DQogICAgfQ0KDQogICAgYXN5bmMgbG9hZFByb2plY3QobmFtZSkgew0KICAgICAgICB0aGlzLmd1aS5zaG93KCJwcm9qZWN0RWRpdCIpOw0KICAgICAgICB0aGlzLmd1aS5yaWJib24ubG9hZFJpYmJvbnMoKTsNCiAgICAgICAgDQogICAgICAgIHRoaXMubmFtZSA9IG5hbWU7DQogICAgICAgIHRoaXMucGF0aCA9IHRoaXMucHJvamVjdHNbbmFtZV0ucGF0aDsNCg0KICAgICAgICB0aGlzLmd1aS5sb2FkSW50b1Byb2plY3QodGhpcy5wYXRoKTsNCiAgICB9DQoNCiAgICBnZXRQYXRoKCkgew0KICAgICAgICByZXR1cm4gdGhpcy5wYXRoOw0KICAgIH0NCn0NCm5ldyBwcm9ncmFtKCk7", "projects": {"test.json": "ew0KICAicGFnZXMiOiBbDQogICAgWw0KICAgICAgew0KICAgICAgICAidHlwZSI6ICJ0ZXh0IiwNCiAgICAgICAgImRhdGEiOiAiVGhpcyBpcyBhIHRleHQgYmxvY2siLA0KICAgICAgICAicG9zIjogew0KICAgICAgICAgICJ4IjogNTAsDQogICAgICAgICAgInkiOiA1MA0KICAgICAgICB9LA0KICAgICAgICAic2l6ZSI6IHsNCiAgICAgICAgICAid2lkdGgiOiAxMDAsDQogICAgICAgICAgImhlaWdodCI6IDEwMA0KICAgICAgICB9LA0KICAgICAgICAic3R5bGluZyI6IHsNCiAgICAgICAgICAiZm9udFNpemUiOiAxMiwNCiAgICAgICAgICAiZm9udEZhbWlseSI6ICJBcmlhbCIsDQogICAgICAgICAgImNvbG9yIjogIiNmZmZmZmZmZiIsDQogICAgICAgICAgImJhY2tncm91bmRDb2xvciI6ICIjMDAwMGZmZmYiDQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICB7DQogICAgICAgICJ0eXBlIjogInRleHQiLA0KICAgICAgICAiZGF0YSI6ICJVV1UiLA0KICAgICAgICAicG9zIjogew0KICAgICAgICAgICJ4IjogNTAsDQogICAgICAgICAgInkiOiAxNTANCiAgICAgICAgfSwNCiAgICAgICAgInNpemUiOiB7DQogICAgICAgICAgIndpZHRoIjogMTAwLA0KICAgICAgICAgICJoZWlnaHQiOiA0MA0KICAgICAgICB9LA0KICAgICAgICAic3R5bGluZyI6IHsNCiAgICAgICAgICAiZm9udFNpemUiOiA0MCwNCiAgICAgICAgICAiZm9udEZhbWlseSI6ICJBcmlhbCIsDQogICAgICAgICAgImNvbG9yIjogIiMwMDAwMDBmZiIsDQogICAgICAgICAgImJhY2tncm91bmRDb2xvciI6ICIjMDAwMDAwMDAiDQogICAgICAgIH0NCiAgICAgIH0NCiAgICBdDQogIF0sDQogICJwaXhlbFJhdGlvIjogIjcwMDozOTQiIA0KfQ0K"}, "projects.json": "Ww0KICAgIHsNCiAgICAgICAgIm5hbWUiOiAidGVzdCIsDQogICAgICAgICJwYXRoIjogImMvcHJvZ3JhbXMvZXhpdE1lL3Byb2plY3RzL3Rlc3QuanNvbiINCiAgICB9DQpd", "run.js": "U3lzdGVtLnByb2dyYW0ucnVuUHJvZ3JhbShQQVRILmZvbGRlcigpICsgIi9tYWluLmpzIik=", "style.css": "LypleGl0TWUgc3R5bGVzLiBVc2UgdGhpcyBmb3IgYWxsIGV4aXRNZSBzdHlsZXMNCiAgICBbd2luZG93aWQ9Int7d2luZG93SWR9fSJdW3dpbmRvd2VsZW1lbnQ9IiJdew0KICAgIH0NCiovDQoNCi53aW5kb3dbd2luZG93aWQ9Int7d2luZG93SWR9fSJdIC50aXRsZS1iYXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNjNTNkMTU7DQp9DQoNCi53aW5kb3dbd2luZG93aWQ9Int7d2luZG93SWR9fSJdIC5jb250ZW50IHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWFlOGU2Ow0KICAgIG92ZXJmbG93OiBoaWRkZW47DQp9DQoNCi53aW5kb3dbd2luZG93aWQ9Int7d2luZG93SWR9fSJdIC50aXRsZS1iYXIgLm1pbmltaXplIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzUzZDE1Ow0KfQ0KDQoud2luZG93W3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXSAudGl0bGUtYmFyIC5tYXhpbWl6ZSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2M1M2QxNTsNCn0NCg0KLndpbmRvd1t3aW5kb3dpZD0ie3t3aW5kb3dJZH19Il0gLnRpdGxlLWJhciAuY2xvc2Ugew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNjNTNkMTU7DQp9DQoNCi53aW5kb3dbd2luZG93aWQ9Int7d2luZG93SWR9fSJdIC50aXRsZS1iYXIgLm1pbmltaXplOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDQ0YjIzOw0KfQ0KDQoud2luZG93W3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXSAudGl0bGUtYmFyIC5tYXhpbWl6ZTpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2Q0NGIyMzsNCn0NCg0KLndpbmRvd1t3aW5kb3dpZD0ie3t3aW5kb3dJZH19Il0gLnRpdGxlLWJhciAuY2xvc2U6aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICM5NjIzMDA7DQp9DQoNCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJyaWJib25Db250cm9sbEJhciJdIHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgd2lkdGg6IDEwMCU7DQp9DQoNClt3aW5kb3dpZD0ie3t3aW5kb3dJZH19Il1bd2luZG93ZWxlbWVudD0idG9wQmFyIl0gew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZmxleC1kaXJlY3Rpb246IHJvdzsNCiAgICBoZWlnaHQ6IDMwcHg7DQogICAgd2lkdGg6IDEwMCU7DQoNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzUzZDE1Ow0KDQoNCiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2JmYmZiZjsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJwcm9qZWN0RWRpdCJdIHsNCiAgICBoZWlnaHQ6IDEwMCU7DQp9DQoNClt3aW5kb3dpZD0ie3t3aW5kb3dJZH19Il1bd2luZG93ZWxlbWVudD0idG9vbFNlbGVjdCJdIHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7DQogICAgaGVpZ2h0OiAxMDBweDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTZlNmU2Ow0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjYmZiZmJmOw0KICAgIGZsZXgtd3JhcDogd3JhcDsNCiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJyaWJib25Ub3AiXSB7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICNlNmU2ZTY7DQogICAgYm9yZGVyOiAxcHggc29saWQgI2JmYmZiZjsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJyaWJib25Ub3AiXTpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2ViZWJlYjsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJyaWJib25Cb3R0b20iXSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTZlNjsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJyaWJib25Cb3R0b20iXTpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2ViZWJlYjsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJyaWJib25Ub3AiXVtzZWxlY3RlZF0gew0KICAgIGJvcmRlci1ib3R0b206IG5vbmU7DQp9DQoNClt3aW5kb3dpZD0ie3t3aW5kb3dJZH19Il1bd2luZG93ZWxlbWVudD0icHJvamVjdENvbnRlbnQiXSB7DQogICAgYm9yZGVyOiAxcHggc29saWQgI2ZmMDAwMDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOw0KfQ0KDQoNClt3aW5kb3dpZD0ie3t3aW5kb3dJZH19Il1bd2luZG93ZWxlbWVudD0icHJvamVjdENvbnRlbnRXcmFwZXIiXSB7DQogICAgcGFkZGluZy1sZWZ0OiAxMHB4Ow0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBvdmVyZmxvdzogYXV0bzsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJwYWdlU2VsZWN0Il0gew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZmxleC1kaXJlY3Rpb246IHJvdzsNCiAgICB3aWR0aDogMTAycHg7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2VhZThlNjsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjYmZiZmJmOw0KfQ0KDQpbd2luZG93aWQ9Int7d2luZG93SWR9fSJdW3dpbmRvd2VsZW1lbnQ9InBhZ2VSZW5kZXIiXSB7DQogICAgd2lkdGg6IDEwMHB4Ow0KICAgIGhlaWdodDogMTAwcHg7DQogICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7DQp9DQoNClt3aW5kb3dpZD0ie3t3aW5kb3dJZH19Il1bd2luZG93ZWxlbWVudD0ic21hbGxQYWdlIl0gew0KICAgIHdpZHRoOiAxMDBweDsNCiAgICBoZWlnaHQ6IGZpdC1jb250ZW50Ow0KICAgIGJvcmRlcjogMXB4IHNvbGlkICNiZmJmYmY7DQp9DQoNClt3aW5kb3dpZD0ie3t3aW5kb3dJZH19Il1bd2luZG93ZWxlbWVudD0iZWRpdG9yIl0gew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZmxleC1kaXJlY3Rpb246IHJvdzsNCiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDEzM3B4KTsNCiAgICB3aWR0aDogMTAwJTsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJjb250ZW50Q2hhbmdlciJdIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMDAwMDA7DQogICAgei1pbmRleDogOTk5OTsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJjb250ZW50Q2hhbmdlcl9ib21tbCJdIHsNCiAgICBib3JkZXI6IDNweCByZ2IoMTYwLCAxNjAsIDE2MCkgc29saWQ7DQogICAgYm9yZGVyLXJhZGl1czogNTAlOw0KICAgIHdpZHRoOiAxMHB4Ow0KICAgIGhlaWdodDogMTBweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgei1pbmRleDogOTk5OTsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJjb250ZW50Q2hhbmdlckJvcmRlciJdIHsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgY3Vyc29yOiBtb3ZlOw0KICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50Ow0KICAgIHBvaW50ZXItZXZlbnRzOiBub25lOw0KICAgIGJvcmRlcjogNHB4IHNvbGlkICMwMDAwMDA2OTsNCiAgICB0b3A6IC00cHg7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIGxlZnQ6IC00cHg7DQp9DQoNClt3aW5kb3dpZD0ie3t3aW5kb3dJZH19Il1bd2luZG93ZWxlbWVudD0iY29udGVudENoYW5nZXJCb3JkZXIiXT5kaXYgew0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMDAwMDQ7DQogICAgd2lkdGg6IDMwcHg7DQogICAgaGVpZ2h0OiAzMHB4Ow0KICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvOw0KfQ0KDQoNClt3aW5kb3dpZD0ie3t3aW5kb3dJZH19Il1bd2luZG93ZWxlbWVudD0iY29udGVudENoYW5nZXJCb3JkZXIiXT5kaXY6bnRoLWNoaWxkKDEpIHsNCiAgICB0b3A6IC0yMHB4Ow0KICAgIGxlZnQ6IDBweDsNCiAgICB3aWR0aDogMTAwJTsNCn0NCg0KW3dpbmRvd2lkPSJ7e3dpbmRvd0lkfX0iXVt3aW5kb3dlbGVtZW50PSJjb250ZW50Q2hhbmdlckJvcmRlciJdPmRpdjpudGgtY2hpbGQoMikgew0KICAgIGJvdHRvbTogLTIwcHg7DQogICAgbGVmdDogMHB4Ow0KICAgIHdpZHRoOiAxMDAlOw0KfQ0KDQpbd2luZG93aWQ9Int7d2luZG93SWR9fSJdW3dpbmRvd2VsZW1lbnQ9ImNvbnRlbnRDaGFuZ2VyQm9yZGVyIl0+ZGl2Om50aC1jaGlsZCgzKSB7DQogICAgbGVmdDogLTIwcHg7DQogICAgdG9wOiAwcHg7DQogICAgaGVpZ2h0OiAxMDAlOw0KfQ0KDQpbd2luZG93aWQ9Int7d2luZG93SWR9fSJdW3dpbmRvd2VsZW1lbnQ9ImNvbnRlbnRDaGFuZ2VyQm9yZGVyIl0+ZGl2Om50aC1jaGlsZCg0KSB7DQogICAgdG9wOiAwcHg7DQogICAgcmlnaHQ6IC0yMHB4Ow0KICAgIGhlaWdodDogMTAwJTsNCn0="}