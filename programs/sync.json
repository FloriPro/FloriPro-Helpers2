{"auth.html": "PGlucHV0IGVsZW1lbnQ9InVzZXJuYW1lIiBwbGFjZWhvbGRlcj0idXNlcm5hbWUiPg0KPGlucHV0IGVsZW1lbnQ9InBhc3N3b3JkIiBwbGFjZWhvbGRlcj0icGFzc3dvcmQiPg0KPGJ1dHRvbiBlbGVtZW50PSJzdWJtaXQiPkxvZyBJbjwvYnV0dG9uPg0KPGJ1dHRvbiBlbGVtZW50PSJzdWJtaXRSZWdpc3RlciI+UmVnaXN0ZXI8L2J1dHRvbj4NCg==", "html.html": "PHA+U3RhdHVzOiA8c3BhbiBlbGVtZW50PSJzdGF0dXMiPndvcmtpbmc8L3NwYW4+PC9wPg0KPGJ1dHRvbiBlbGVtZW50PSJyZWxvZ2luIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPlJlLUxvZ2luPC9idXR0b24+", "install.js": "YXN5bmMgZnVuY3Rpb24gcnVuKCkgew0KICAgIGF3YWl0IFN5c3RlbS5vcHRpb25zLmFkZFZhbHVlKCJwcm9ncmFtcyIsICJTeW5jIiwgeyAicGF0aCI6ICJjL3Byb2dyYW1zL3N5bmMvbWFpbi5qcyIsICJuYW1lIjogIlN5bmMiLCAicnVuIjogImMvcHJvZ3JhbXMvc3luYy9ydW4uanMiIH0sIHRydWUpOw0KICAgIFN5c3RlbUh0bWwudXBkYXRlU3RhcnRtZW51KCkNCg0KICAgIGF3YWl0IFN5c3RlbS5wcm9ncmFtLmxpYkluc3RhbGwoIm1kNSIpOw0KDQogICAgLy9hZGQgdGhlIHdvcmtlciB0byBzdGFydCBvbiBib290DQogICAgdmFyIG8gPSBhd2FpdCBTeXN0ZW0ub3B0aW9ucy5hZGRWYWx1ZSgic3RhcnR1cCIsICJjL3Byb2dyYW1zL3N5bmMvcnVud29ya2VyLmpzIiwgdHJ1ZSwgZmFsc2UpOw0KDQogICAgLy9ydW4gdGhlIHdvcmtlcg0KICAgIGF3YWl0IGRlbGF5KDEwMCk7DQogICAgaWYgKCFTeXN0ZW0ucHJvZ3JhbS5jb25uZWN0Lmxpc3RlbmVyRXhpc3RzKCJzeW5jV29ya2VyIikgJiYgbyA9PSB0cnVlKSB7DQogICAgICAgIGNvbnNvbGUud2FybigicnVuIHdvcmtlciIpDQogICAgICAgIGF3YWl0IFN5c3RlbS5ydW4oImMvcHJvZ3JhbXMvc3luYy9ydW53b3JrZXIuanMiKTsNCiAgICB9DQoNCiAgICAvL3N0YXJ0IHByb2dyYW0NCiAgICBhd2FpdCBTeXN0ZW0ucnVuKCJjL3Byb2dyYW1zL3N5bmMvcnVuLmpzIik7DQoNCiAgICByZXR1cm4gdHJ1ZTsNCn0NCnJ1bigpOw==", "installLocation.dat": "Yy9wcm9ncmFtcy9zeW5j", "main.js": "Y2xhc3MgcHJvZ3JhbSBleHRlbmRzIFN5c3RlbS5wcm9ncmFtLmRlZmF1bHQgew0KICAgIGNvbnN0cnVjdG9yKCkgew0KICAgICAgICBzdXBlcigpDQogICAgICAgIC8vZG9uJ3QgdXNlIQ0KICAgIH0NCiAgICBhc3luYyBpbml0KCkgew0KICAgICAgICAvKioNCiAgICAgICAgICogQHR5cGUge0h0bWxXaW5kb3d9DQogICAgICAgICAqLw0KICAgICAgICB0aGlzLndpbmRvdyA9IGF3YWl0IFN5c3RlbUh0bWwuV2luZG93SGFuZGxlci5jcmVhdGVXaW5kb3coIlN5bmMiLA0KICAgICAgICAgICAgLy9vbnJlYWR5Og0KICAgICAgICAgICAgYXN5bmMgKCkgPT4gew0KICAgICAgICAgICAgICAgIC8vc2V0IGh0bWwNCiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndpbmRvdy5hcHBlYXJlbmNlLnNldExvZ28odGhpcy5QQVRILmZvbGRlcigpICsgIi9sb2dvLndlYnAiKQ0KDQogICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53aW5kb3cuc2V0Q29udGVudChhd2FpdCBTeXN0ZW1GaWxlU3lzdGVtLmdldEZpbGVTdHJpbmcodGhpcy5QQVRILmZvbGRlcigpICsgIi9odG1sLmh0bWwiKSk7DQogICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53aW5kb3cuc2l6ZS5zZXRJbm5lclNpemUoMjMwLCA1MCk7DQogICAgICAgICAgICAgICAgdGhpcy53aW5kb3cuc2l6ZS51c2VyQ2FuUmVzaXplKHRydWUpOw0KDQogICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IGF3YWl0IFN5c3RlbS5wcm9ncmFtLmNvbm5lY3Quc2VuZCgic3luY1dvcmtlciIsIHsgdHlwZTogInN0YXR1cyIgfSk7DQogICAgICAgICAgICAgICAgKGF3YWl0IHRoaXMud2luZG93LmdldEh0bWxFbGVtZW50KCJzdGF0dXMiKSkuaW5uZXJUZXh0ID0gc3RhdHVzOw0KICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RhdHVzKHN0YXR1cyk7DQoNCiAgICAgICAgICAgICAgICB0aGlzLndsID0gdGhpcy53b3JrZXJMaXN0ZW5lci5iaW5kKHRoaXMpDQogICAgICAgICAgICAgICAgYXdhaXQgU3lzdGVtLnByb2dyYW0uY29ubmVjdC5zZW5kKCJzeW5jV29ya2VyIiwgeyB0eXBlOiAibGlzdGVuZXIiLCBsaXN0ZW5lcjogdGhpcy53bCB9KTsNCg0KICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2luZG93LmFkZEh0bWxFdmVudExpc3RlbmVyKCJvbmNsaWNrIiwgInJlbG9naW4iLCBhc3luYyAoKSA9PiB7DQogICAgICAgICAgICAgICAgICAgIChhd2FpdCB0aGlzLndpbmRvdy5nZXRIdG1sRWxlbWVudCgicmVsb2dpbiIpKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOw0KICAgICAgICAgICAgICAgICAgICBuZXcgYXV0aFdpbmRvdyh0aGlzKTsNCiAgICAgICAgICAgICAgICB9LCB0aGlzKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB0aGlzLndpbmRvdy5jbG9zZSA9ICgpID0+IHsNCiAgICAgICAgICAgIFN5c3RlbS5wcm9ncmFtLmNvbm5lY3Quc2VuZCgic3luY1dvcmtlciIsIHsgdHlwZTogInVubGlzdGVuZXIiLCBsaXN0ZW5lcjogdGhpcy53bCB9KQ0KICAgICAgICAgICAgdGhpcy5zdG9wKCkNCiAgICAgICAgICAgIHJldHVybiB0cnVlDQogICAgICAgIH0NCiAgICB9DQoNCiAgICBhc3luYyBoYW5kbGVTdGF0dXMoc3RhdHVzKSB7DQogICAgICAgIGlmIChzdGF0dXMgPT0gIm5lZWRzQXV0aCIpIHsNCiAgICAgICAgICAgIG5ldyBhdXRoV2luZG93KHRoaXMpOw0KICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSAibm9BdXRoIikgew0KICAgICAgICAgICAgKGF3YWl0IHRoaXMud2luZG93LmdldEh0bWxFbGVtZW50KCJyZWxvZ2luIikpLnN0eWxlLmRpc3BsYXkgPSAiIjsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIChhd2FpdCB0aGlzLndpbmRvdy5nZXRIdG1sRWxlbWVudCgicmVsb2dpbiIpKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOw0KICAgICAgICB9DQogICAgfQ0KICAgIGFzeW5jIHdvcmtlckxpc3RlbmVyKGRhdGEpIHsNCiAgICAgICAgaWYgKGRhdGEudHlwZSA9PSAic3RhdHVzIikgew0KICAgICAgICAgICAgdmFyIHN0YXR1cyA9IGRhdGEuc3RhdHVzOw0KICAgICAgICAgICAgKGF3YWl0IHRoaXMud2luZG93LmdldEh0bWxFbGVtZW50KCJzdGF0dXMiKSkuaW5uZXJUZXh0ID0gc3RhdHVzOw0KICAgICAgICAgICAgdGhpcy5oYW5kbGVTdGF0dXMoc3RhdHVzKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KY2xhc3MgYXV0aFdpbmRvdyB7DQogICAgY29uc3RydWN0b3IocGFyZW50KSB7DQogICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50Ow0KICAgICAgICB0aGlzLmluaXQoKQ0KICAgIH0NCiAgICBhc3luYyBpbml0KCkgew0KICAgICAgICB0aGlzLndpbmRvdyA9IGF3YWl0IFN5c3RlbUh0bWwuV2luZG93SGFuZGxlci5jcmVhdGVXaW5kb3coIlN5bmMgLSBBdXRoIiwNCiAgICAgICAgICAgIC8vb25yZWFkeToNCiAgICAgICAgICAgIGFzeW5jICgpID0+IHsNCiAgICAgICAgICAgICAgICAvL3NldCBodG1sDQogICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53aW5kb3cuYXBwZWFyZW5jZS5zZXRMb2dvKHRoaXMucGFyZW50LlBBVEguZm9sZGVyKCkgKyAiL2xvZ28ud2VicCIpDQoNCiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndpbmRvdy5zZXRDb250ZW50KGF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uZ2V0RmlsZVN0cmluZyh0aGlzLnBhcmVudC5QQVRILmZvbGRlcigpICsgIi9hdXRoLmh0bWwiKSk7DQogICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53aW5kb3cuc2l6ZS5zZXRJbm5lclNpemUoNTAwLCA0MDApOw0KICAgICAgICAgICAgICAgIHRoaXMud2luZG93LnNpemUudXNlckNhblJlc2l6ZSh0cnVlKTsNCg0KICAgICAgICAgICAgICAgIChhd2FpdCB0aGlzLndpbmRvdy5nZXRIdG1sRWxlbWVudCgic3VibWl0IikpLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7DQogICAgICAgICAgICAgICAgICAgIHZhciB1c2VybmFtZSA9IChhd2FpdCB0aGlzLndpbmRvdy5nZXRIdG1sRWxlbWVudCgidXNlcm5hbWUiKSkudmFsdWU7DQogICAgICAgICAgICAgICAgICAgIHZhciBwYXNzd29yZCA9IChhd2FpdCB0aGlzLndpbmRvdy5nZXRIdG1sRWxlbWVudCgicGFzc3dvcmQiKSkudmFsdWU7DQoNCiAgICAgICAgICAgICAgICAgICAgYXdhaXQgU3lzdGVtLnByb2dyYW0uY29ubmVjdC5zZW5kKCJzeW5jV29ya2VyIiwgeyB0eXBlOiAiYXV0aCIsIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkIH0pOw0KICAgICAgICAgICAgICAgICAgICB0aGlzLndpbmRvdy5tYWtlQ2xvc2UoKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAoYXdhaXQgdGhpcy53aW5kb3cuZ2V0SHRtbEVsZW1lbnQoInN1Ym1pdFJlZ2lzdGVyIikpLm9uY2xpY2sgPSBhc3luYyAoKSA9PiB7DQogICAgICAgICAgICAgICAgICAgIHZhciB1c2VybmFtZSA9IChhd2FpdCB0aGlzLndpbmRvdy5nZXRIdG1sRWxlbWVudCgidXNlcm5hbWUiKSkudmFsdWU7DQogICAgICAgICAgICAgICAgICAgIHZhciBwYXNzd29yZCA9IChhd2FpdCB0aGlzLndpbmRvdy5nZXRIdG1sRWxlbWVudCgicGFzc3dvcmQiKSkudmFsdWU7DQoNCiAgICAgICAgICAgICAgICAgICAgYXdhaXQgU3lzdGVtLnByb2dyYW0uY29ubmVjdC5zZW5kKCJzeW5jV29ya2VyIiwgeyB0eXBlOiAicmVnaXN0ZXIiLCB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZCB9KTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy53aW5kb3cubWFrZUNsb3NlKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgfQ0KfQ0KDQpuZXcgcHJvZ3JhbSgpOw==", "run.js": "U3lzdGVtLnByb2dyYW0ucnVuUHJvZ3JhbShQQVRILmZvbGRlcigpICsgIi9tYWluLmpzIik=", "runworker.js": "U3lzdGVtLnByb2dyYW0ucnVuUHJvZ3JhbShQQVRILmZvbGRlcigpICsgIi93b3JrZXIuanMiKQ==", "worker": {"connection.js": "Y2xhc3Mgc3luY1dvcmtlckNvbm5lY3Rpb24gew0KICAgIGNvbnN0cnVjdG9yKHVybCkgew0KICAgICAgICAvL2dsb2JhbCB2YXJpYWJsZXMNCiAgICAgICAgdGhpcy5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7IH07DQogICAgICAgIHRoaXMub25tZXNzYWdlID0gZnVuY3Rpb24gKCkgeyB9Ow0KICAgICAgICB0aGlzLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7IH07DQogICAgICAgIHRoaXMub25jbG9zZSA9IGZ1bmN0aW9uICgpIHsgfTsNCg0KICAgICAgICB0aGlzLnVybCA9IHVybDsNCiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldCh1cmwpOw0KICAgICAgICB0aGlzLmNvbm5lY3Rpb24ub25vcGVuID0gZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICB0aGlzLm9ub3BlbihldmVudCk7DQogICAgICAgIH0uYmluZCh0aGlzKTsNCiAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgICAgdGhpcy5vbm1lc3NhZ2UoZXZlbnQpOw0KICAgICAgICB9LmJpbmQodGhpcyk7DQogICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICB0aGlzLm9uZXJyb3IoZXZlbnQpOw0KICAgICAgICB9LmJpbmQodGhpcyk7DQogICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbmNsb3NlID0gZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICB0aGlzLm9uY2xvc2UoZXZlbnQpOw0KICAgICAgICB9LmJpbmQodGhpcyk7DQogICAgfQ0KICAgIHNlbmQoZGF0YSkgew0KICAgICAgICB0aGlzLmNvbm5lY3Rpb24uc2VuZChKU09OLnN0cmluZ2lmeShkYXRhKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGNvbm5lY3Rpb24gaXMgb3Blbg0KICAgICAqLw0KICAgIGdldCBjb25uZWN0ZWQoKSB7DQogICAgICAgIHZhciBjID0gdGhpcy5jb25uZWN0aW9uLnJlYWR5U3RhdGUgPT0gdGhpcy5jb25uZWN0aW9uLk9QRU47DQogICAgICAgIHJldHVybiBjOw0KICAgIH0NCn0NCnN5bmNXb3JrZXJDb25uZWN0aW9uOw==", "sync.js": "Y2xhc3Mgc3luY1N5bmNlciB7DQogICAgLyoqDQogICAgICogDQogICAgICogQHBhcmFtIHtzeW5jV29ya2VyUHJvZ3JhbX0gcGFyZW50IA0KICAgICAqLw0KICAgIGNvbnN0cnVjdG9yKHBhcmVudCkgew0KICAgICAgICBjb25zb2xlLmxvZyhwYXJlbnQpDQogICAgICAgIC8qKg0KICAgICAgICAgKiBAdHlwZSB7c3luY1dvcmtlclByb2dyYW19DQogICAgICAgICAqLw0KICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDsNCg0KICAgICAgICB0aGlzLndhaXRpbmdGb3JBbnN3ZXIgPSBuZXcgY2xhc3Mgew0KICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7DQogICAgICAgICAgICAgICAgdGhpcy5saXN0ID0gW107DQoNCiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSA9ICgpID0+IHsgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBwb3AocGF0aCkgew0KICAgICAgICAgICAgICAgIHRoaXMubGlzdC5wb3AocGF0aCk7DQogICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHB1c2gocGF0aCkgew0KICAgICAgICAgICAgICAgIHRoaXMubGlzdC5wdXNoKHBhdGgpOw0KICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0oKTsNCg0KICAgICAgICB0aGlzLndhaXRpbmdGb3JBbnN3ZXIudXBkYXRlID0gKCkgPT4gew0KICAgICAgICAgICAgaWYgKHRoaXMud2FpdGluZ0ZvckFuc3dlci5saXN0Lmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuZmluaXNoKCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LmxvYWRpbmcoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCiAgICAvKioNCiAgICAgKiANCiAgICAgKiBAcGFyYW0gez9zdHJpbmd9IHBhdGggDQogICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nW10+fQ0KICAgICAqLw0KICAgIGFzeW5jIGdldFVzZXJGaWxlcyhwYXRoID0gImMvdXNlciIpIHsNCiAgICAgICAgdmFyIGZpbGVzID0gYXdhaXQgU3lzdGVtRmlsZVN5c3RlbS5nZXRGaWxlcyhwYXRoKTsNCiAgICAgICAgdmFyIGZpbGVQYXRocyA9IFtdOw0KICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICBpZiAoYXdhaXQgU3lzdGVtRmlsZVN5c3RlbS5maWxlRXhpc3RzKHBhdGggKyAiLyIgKyBmaWxlc1tpXSkpIHsNCiAgICAgICAgICAgICAgICBmaWxlUGF0aHMucHVzaChwYXRoICsgIi8iICsgZmlsZXNbaV0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIGZvbGRlcnMgPSBhd2FpdCBTeXN0ZW1GaWxlU3lzdGVtLmdldEZvbGRlcnMocGF0aCk7DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9sZGVycy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgZmlsZVBhdGhzID0gZmlsZVBhdGhzLmNvbmNhdChhd2FpdCB0aGlzLmdldFVzZXJGaWxlcyhwYXRoICsgIi8iICsgZm9sZGVyc1tpXSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIGZpbGVQYXRoczsNCiAgICB9DQoNCiAgICBhc3luYyBpbml0aWFsU3luYygpIHsNCiAgICAgICAgdmFyIGZpbGVzID0gYXdhaXQgdGhpcy5nZXRVc2VyRmlsZXMoKTsNCiAgICAgICAgdmFyIGRhdGEgPSBbXTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgZGF0YS5wdXNoKHsgcGF0aDogZmlsZXNbaV0sIGRhdGE6IGF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uZ2V0RmlsZVN0cmluZyhmaWxlc1tpXSwgdHJ1ZSkgfSk7DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5wYXJlbnQuY29ubmVjdGlvbi5zZW5kKHsgdHlwZTogImluaXRpYWxTeW5jIiwgZGF0YTogZGF0YSB9KTsNCiAgICB9DQoNCiAgICBhc3luYyBjcmVhdGVMaXN0ZW5lcigpIHsNCiAgICAgICAgU3lzdGVtRmlsZVN5c3RlbS5jaGFuZ2VzLmFkZExpc3RlbmVyKHRoaXMuY2hhbmdlTGlzdGVuZXIuYmluZCh0aGlzKSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggDQogICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgDQogICAgICovDQogICAgYXN5bmMgY2hhbmdlTGlzdGVuZXIocGF0aCwgdHlwZSkgew0KICAgICAgICBjb25zb2xlLmxvZyhwYXRoLCB0eXBlKTsNCiAgICAgICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoImMvdXNlciIpICYmICFwYXRoLnN0YXJ0c1dpdGgoImMvc3lzL29wdGlvbnMiKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQogICAgICAgIHRoaXMud2FpdGluZ0ZvckFuc3dlci5wdXNoKHBhdGgpOw0KICAgICAgICBpZiAodHlwZSA9PSAiZGVsZXRlIikgew0KICAgICAgICAgICAgdGhpcy5wYXJlbnQuY29ubmVjdGlvbi5zZW5kKHsgdHlwZTogImRlbGV0ZSIsIHBhdGg6IHBhdGggfSk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSBpZiAodHlwZSA9PSAiY2hhbmdlIikgeyAvL2NoYW5nZSBpcyB0aGUgc2FtZSBhcyBjcmVhdGUNCiAgICAgICAgICAgIHRoaXMucGFyZW50LmNvbm5lY3Rpb24uc2VuZCh7IHR5cGU6ICJjaGFuZ2UiLCBwYXRoOiBwYXRoLCBkYXRhOiBhd2FpdCBTeXN0ZW1GaWxlU3lzdGVtLmdldEZpbGVTdHJpbmcocGF0aCwgdHJ1ZSkgfSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiANCiAgICAgKiBAcGFyYW0ge3tzdHJpbmc6c3RyaW5nfX0gaGFzaGVzIA0KICAgICAqLw0KICAgIGFzeW5jIHVwZGF0ZUZpbGVzKGhhc2hlcykgew0KICAgICAgICB2YXIgbmVlZHNVcGRhdGVGaWxlcyA9IFtdOw0KICAgICAgICB2YXIgdW50cmFja2VkRmlsZXMgPSBhd2FpdCB0aGlzLmdldFVzZXJGaWxlcygpOw0KDQogICAgICAgIGZvciAodmFyIHBhdGggb2YgT2JqZWN0LmtleXMoaGFzaGVzKSkgew0KICAgICAgICAgICAgdGhpcy53YWl0aW5nRm9yQW5zd2VyLnBvcChwYXRoKTsNCiAgICAgICAgICAgIHZhciBoYXNoID0gaGFzaGVzW3BhdGhdOw0KICAgICAgICAgICAgaWYgKFN5c3RlbUZpbGVTeXN0ZW0uZmlsZUV4aXN0cyhwYXRoKSA9PSBmYWxzZSkgew0KICAgICAgICAgICAgICAgIG5lZWRzVXBkYXRlRmlsZXMucHVzaChwYXRoKTsNCiAgICAgICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChoYXNoICE9IG1kNShhd2FpdCBTeXN0ZW1GaWxlU3lzdGVtLmdldEZpbGVTdHJpbmcocGF0aCwgdHJ1ZSkpKSB7DQogICAgICAgICAgICAgICAgbmVlZHNVcGRhdGVGaWxlcy5wdXNoKHBhdGgpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvL3JlbW92ZSBlbG1lbnQgZnJvbSB1bnRyYWNrZWRGaWxlcw0KICAgICAgICAgICAgdmFyIGluZGV4ID0gdW50cmFja2VkRmlsZXMuaW5kZXhPZihwYXRoKTsNCiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7DQogICAgICAgICAgICAgICAgdW50cmFja2VkRmlsZXMuc3BsaWNlKGluZGV4LCAxKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vc2VuZCB1bnRyYXFja2VkIGZpbGVzDQogICAgICAgIGZvciAodmFyIHBhdGggb2YgdW50cmFja2VkRmlsZXMpIHsNCiAgICAgICAgICAgIHRoaXMud2FpdGluZ0ZvckFuc3dlci5wdXNoKHBhdGgpOw0KICAgICAgICAgICAgdGhpcy5wYXJlbnQuY29ubmVjdGlvbi5zZW5kKHsgdHlwZTogImNoYW5nZSIsIHBhdGg6IHBhdGgsIGRhdGE6IGF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uZ2V0RmlsZVN0cmluZyhwYXRoLCB0cnVlKSB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vZ2V0IGZpbGVzIHRoYXQgbmVlZCB1cGRhdGUNCiAgICAgICAgZm9yICh2YXIgcGF0aCBvZiBuZWVkc1VwZGF0ZUZpbGVzKSB7DQogICAgICAgICAgICB0aGlzLndhaXRpbmdGb3JBbnN3ZXIucHVzaChwYXRoKTsNCiAgICAgICAgICAgIHRoaXMucGFyZW50LmNvbm5lY3Rpb24uc2VuZCh7IHR5cGU6ICJnZXRGaWxlIiwgZGF0YTogcGF0aCB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRoaXMuY3JlYXRlTGlzdGVuZXIoKTsNCiAgICB9DQp9DQpzeW5jU3luY2VyOw=="}, "worker.js": "Ly8gV29ya2VyICphbGx3YXlzKiBydW5zIGluIGluIHRoZSBiYWNrZ3JvdW5kLCB0aGUgd2luZG93IG9ubHkgImNvbm5lY3RzIiB0byBpdCB3aGVuIG5lZWRlZA0KDQpjbGFzcyBzeW5jV29ya2VyUHJvZ3JhbSBleHRlbmRzIFN5c3RlbS5wcm9ncmFtLmRlZmF1bHQgew0KICAgIGNvbnN0cnVjdG9yKCkgew0KICAgICAgICBzdXBlcigpDQogICAgICAgIC8vZG9uJ3QgdXNlIQ0KICAgIH0NCiAgICBhc3luYyBpbml0KCkgew0KICAgICAgICAvL2xvYWQgbWQ1DQogICAgICAgIGF3YWl0IFN5c3RlbS5nZXRMaWIoIm1kNSIpOw0KDQogICAgICAgIC8qKg0KICAgICAgICAgKiBAdHlwZSB7c3luY1N5bmNlcn0NCiAgICAgICAgICovDQogICAgICAgIHRoaXMuc3luYyA9IG5ldyAoYXdhaXQgU3lzdGVtLnJ1bih0aGlzLlBBVEguZm9sZGVyKCkgKyAiL3dvcmtlci9zeW5jLmpzIikpKHRoaXMpOw0KDQogICAgICAgIHRoaXMuYWJzdHJhY3RTdGF0dXMgPSAib2ZmbGluZSI7DQogICAgICAgIHRoaXMud29ya2VyTGlzdGVuZXIgPSBbXQ0KDQogICAgICAgIHRoaXMudXJsID0gIndzczovL3N5bmMuZmx1bHUuZXUiDQoNCiAgICAgICAgdGhpcy5zZXRQdWJsaWNMaXN0ZW5lcih0aGlzLm1lc3NhZ2UuYmluZCh0aGlzKSwgInN5bmNXb3JrZXIiKQ0KDQogICAgICAgIC8vZ2V0IHVzZXJuYW1lIGFuZCBwYXNzd29yZA0KICAgICAgICBpZiAoIWF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uZmlsZUV4aXN0cygiYy91c2VyL3N5bmMvb3B0aW9ucy5qc29uIikpIHsNCiAgICAgICAgICAgIFN5c3RlbUZpbGVTeXN0ZW0uc2V0RmlsZVN0cmluZygiYy91c2VyL3N5bmMvb3B0aW9ucy5qc29uIiwgSlNPTi5zdHJpbmdpZnkoeyB1c2VybmFtZTogIiIsIHBhc3N3b3JkOiAiIiB9KSk7DQogICAgICAgICAgICB0aGlzLnN0YXR1cyA9ICJuZWVkc0F1dGgiOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgdGhpcy5zdGFydCgpOw0KICAgIH0NCg0KICAgIHNldCBzdGF0dXMoc3RhdHVzKSB7DQogICAgICAgIGlmICh0aGlzLmFic3RyYWN0U3RhdHVzID09IHN0YXR1cykgcmV0dXJuOw0KICAgICAgICB0aGlzLndvcmtlckxpc3RlbmVyLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7DQogICAgICAgICAgICBsaXN0ZW5lcih7IHR5cGU6ICJzdGF0dXMiLCBzdGF0dXM6IHN0YXR1cyB9KTsNCiAgICAgICAgfSk7DQogICAgICAgIHRoaXMuYWJzdHJhY3RTdGF0dXMgPSBzdGF0dXM7DQogICAgfQ0KICAgIC8qKg0KICAgICAqIDxiPm5lZWRzQXV0aDwvYj46IG5vIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBzYXZlZDsNCiAgICAgKiA8Yj5ub0F1dGg8L2I+OiB1c2VybmFtZSBhbmQgcGFzc3dvcmQgc2F2ZWQsIGJ1dCBhdXRoZW50aWZpY2F0aW9uIGZhaWxlZDsNCiAgICAgKiA8Yj5hdXRoV2FpdDwvYj46IHVzZXJuYW1lIGFuZCBwYXNzd29yZCBzYXZlZCwgYXV0aGVudGlmaWNhdGlvbiBpbiBwcm9ncmVzczsNCiAgICAgKiA8Yj5zeW5jaW5nPC9iPjogY3VycmVudGx5IHN5bmNpbmcgZmlsZXM7DQogICAgICogPGI+aWRsZTwvYj46IHdhaXRpbmcgYmVjYXVzZSB3ZSBhcmUgbGF6eTsNCiAgICAgKiA8Yj5zeW5jZWQ8L2I+OiBzeW5jZWQgYWxsIGZpbGVzLiB3YWl0aW5nIGZvciBjaGFuZ2VzOw0KICAgICAqIDxiPm9mZmxpbmU8L2I+OiBubyBjb25uZWN0aW9uIHRvIHNlcnZlci4gd2FpdGluZyBmb3IgY29ubmVjdGlvbi4gUmV0cnlpbmcgZXZlcnl0aW1lIGl0IGZhaWxzOzxicj4NCiAgICAgKiBAdHlwZSB7c3RyaW5nfQ0KICAgICAqLw0KICAgIGdldCBzdGF0dXMoKSB7DQogICAgICAgIHJldHVybiB0aGlzLmFic3RyYWN0U3RhdHVzOw0KICAgIH0NCg0KICAgIGFzeW5jIHN0YXJ0KHJlZ2lzdGVyID0gZmFsc2UpIHsNCiAgICAgICAgdGhpcy5zdGF0dXMgPSAib2ZmbGluZSI7DQogICAgICAgIHRoaXMub3B0aW9ucyA9IGF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uZ2V0RmlsZUpzb24oImMvdXNlci9zeW5jL29wdGlvbnMuanNvbiIpDQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIEB0eXBlIHtzeW5jV29ya2VyQ29ubmVjdGlvbn0NCiAgICAgICAgICovDQogICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG5ldyAoYXdhaXQgU3lzdGVtLnJ1bih0aGlzLlBBVEguZm9sZGVyKCkgKyAiL3dvcmtlci9jb25uZWN0aW9uLmpzIikpKHRoaXMudXJsKQ0KICAgICAgICB0aGlzLmNvbm5lY3Rpb24ub25lcnJvciA9IGFzeW5jIChldmVudCkgPT4gew0KICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbmV3IChhd2FpdCBTeXN0ZW0ucnVuKHRoaXMuUEFUSC5mb2xkZXIoKSArICIvd29ya2VyL2Nvbm5lY3Rpb24uanMiKSkodGhpcy51cmwpDQogICAgICAgIH0NCiAgICAgICAgaWYgKHJlZ2lzdGVyKSB7DQogICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24ub25vcGVuID0gYXN5bmMgKGV2ZW50KSA9PiB7DQogICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSAiYXV0aFdhaXQiOw0KICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5zZW5kKHsgdHlwZTogInJlZ2lzdGVyIiwgdXNlcm5hbWU6IHRoaXMub3B0aW9ucy51c2VybmFtZSwgcGFzc3dvcmQ6IHRoaXMub3B0aW9ucy5wYXNzd29yZCB9KQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbm9wZW4gPSBhc3luYyAoZXZlbnQpID0+IHsNCiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9ICJhdXRoV2FpdCI7DQogICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnNlbmQoeyB0eXBlOiAiYXV0aCIsIHVzZXJuYW1lOiB0aGlzLm9wdGlvbnMudXNlcm5hbWUsIHBhc3N3b3JkOiB0aGlzLm9wdGlvbnMucGFzc3dvcmQgfSkNCiAgICAgICAgICAgIH07DQogICAgICAgIH0NCiAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9ubWVzc2FnZSA9IHRoaXMubXNnLmJpbmQodGhpcyk7DQogICAgfQ0KDQogICAgYXN5bmMgbXNnKGV2ZW50KSB7DQogICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTsNCiAgICAgICAgaWYgKGRhdGEudHlwZSA9PSAiYXV0aCIpIHsNCiAgICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PSBmYWxzZSkgew0KICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gIm5vQXV0aCI7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChkYXRhLnN0YXR1cyA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSAic3luY2luZyI7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChkYXRhLmRhdCA9PSAicmVnaXN0ZXIiKSB7DQogICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLnNlbmQoeyB0eXBlOiAiZ2V0RmlsZXNIYXNoIiB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEuZGF0ID09ICJsb2dpbiIpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24uc2VuZCh7IHR5cGU6ICJnZXRGaWxlc0hhc2giIH0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PSAiZ2V0RmlsZXNIYXNoIikgew0KICAgICAgICAgICAgdGhpcy5zeW5jLnVwZGF0ZUZpbGVzKGRhdGEuZGF0YSk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09ICJnZXRGaWxlIikgew0KICAgICAgICAgICAgdGhpcy5zeW5jLndhaXRpbmdGb3JBbnN3ZXIucG9wKGRhdGEucGF0aCk7DQogICAgICAgICAgICBhd2FpdCBTeXN0ZW1GaWxlU3lzdGVtLnNldEZpbGVTdHJpbmcoZGF0YS5wYXRoLCBkYXRhLmRhdGEsIGZhbHNlKTsNCiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gImFjY25vd2xlZGdlIikgew0KICAgICAgICAgICAgdGhpcy5zeW5jLndhaXRpbmdGb3JBbnN3ZXIucG9wKGRhdGEucGF0aCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBhc3luYyBtZXNzYWdlKGRhdGEpIHsNCiAgICAgICAgaWYgKGRhdGEudHlwZSA9PSAic3RhdHVzIikgew0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzOw0KICAgICAgICB9DQogICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PSAiYXV0aCIpIHsNCiAgICAgICAgICAgIC8vc2F2ZSB1c2VybmFtZSBhbmQgcGFzc3dvcmQNCiAgICAgICAgICAgIFN5c3RlbUZpbGVTeXN0ZW0uc2V0RmlsZVN0cmluZygiYy91c2VyL3N5bmMvb3B0aW9ucy5qc29uIiwgSlNPTi5zdHJpbmdpZnkoeyB1c2VybmFtZTogZGF0YS51c2VybmFtZSwgcGFzc3dvcmQ6IGRhdGEucGFzc3dvcmQgfSkpOw0KICAgICAgICAgICAgdGhpcy5zdGFydCgpOw0KICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PSAicmVnaXN0ZXIiKSB7DQogICAgICAgICAgICAvL3NhdmUgdXNlcm5hbWUgYW5kIHBhc3N3b3JkDQogICAgICAgICAgICBTeXN0ZW1GaWxlU3lzdGVtLnNldEZpbGVTdHJpbmcoImMvdXNlci9zeW5jL29wdGlvbnMuanNvbiIsIEpTT04uc3RyaW5naWZ5KHsgdXNlcm5hbWU6IGRhdGEudXNlcm5hbWUsIHBhc3N3b3JkOiBkYXRhLnBhc3N3b3JkIH0pKTsNCg0KICAgICAgICAgICAgdGhpcy5zdGFydCh0cnVlKTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIGlmIChkYXRhLnR5cGUgPT0gImxpc3RlbmVyIikgew0KICAgICAgICAgICAgdGhpcy53b3JrZXJMaXN0ZW5lci5wdXNoKGRhdGEubGlzdGVuZXIpDQogICAgICAgIH0NCiAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09ICJ1bmxpc3RlbmVyIikgew0KICAgICAgICAgICAgdGhpcy53b3JrZXJMaXN0ZW5lci5zcGxpY2UodGhpcy53b3JrZXJMaXN0ZW5lci5pbmRleE9mKGRhdGEubGlzdGVuZXIpLCAxKQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICJ1bmtub3duIG1lc3NhZ2UiOw0KICAgIH0NCiAgICBmaW5pc2goKSB7DQogICAgICAgIHRoaXMuc3RhdHVzID0gInN5bmNlZCI7DQogICAgfQ0KICAgIGxvYWRpbmcoKSB7DQogICAgICAgIHRoaXMuc3RhdHVzID0gInN5bmNpbmciOw0KICAgIH0NCn0NCm5ldyBzeW5jV29ya2VyUHJvZ3JhbSgpOw=="}