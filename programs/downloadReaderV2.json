{"html.html": "e3tzdHlsZX19DQoNCjxwIGVsZW1lbnQ9InN0YXJ0dXBNZXNzYWdlIj5Mb2FkaW5nIERlcGVuZGVuY2llczwvcD4NCg0KPGRpdiBpZD0ibG9hZGluZyIgZWxlbWVudD0ibG9hZGluZyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCiAgICA8ZGl2IGNsYXNzPSJsZHMtZWxsaXBzaXMiPg0KICAgICAgICA8ZGl2PjwvZGl2Pg0KICAgICAgICA8ZGl2PjwvZGl2Pg0KICAgICAgICA8ZGl2PjwvZGl2Pg0KICAgICAgICA8ZGl2PjwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxwIGlkPSJsb2FkaW5nU3RhbmRhcmRJbmZvIiBlbGVtZW50PSJsb2FkaW5nU3RhbmRhcmRJbmZvIj5Mb2FkaW5nLi4uPC9wPg0KICAgIDxkaXYgaWQ9ImxvYWRpbmdNZXNzYWdlcyIgZWxlbWVudD0ibG9hZGluZ01lc3NhZ2VzIj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KPGRpdiBpZD0iaG9tZSIgZWxlbWVudD0iaG9tZSI+DQogICAgPGgxPlJlYWRlciBEb3dubG9hZGVyPC9oMT4NCiAgICA8YnV0dG9uIGlkPSJidG5Eb3dubG9hZCIgZWxlbWVudD0iYnRuRG93bmxvYWQiPkFkZCBVcmw8L2J1dHRvbj4NCiAgICA8ZGl2IGlkPSJyZWFkZXIiIGVsZW1lbnQ9InJlYWRlciI+PC9kaXY+DQogICAgPGRpdiBpZD0iZG93bmxvYWRlZFBhZ2VzIiBlbGVtZW50PSJkb3dubG9hZGVkUGFnZXMiPg0KICAgIDwvZGl2Pg0KICAgIDxocj4NCiAgICA8YnV0dG9uIGVsZW1lbnQ9ImNsZWFyZGF0YWJhc2UiPkNsZWFyDQogICAgICAgIERhdGFiYXNlPC9idXR0b24+DQogICAgPCEtLTxidXR0b24gb25jbGljaz0ibG9jYXRpb24ucmVsb2FkKCk7Ij5SZWxvYWQ8L2J1dHRvbj4tLT4NCjwvZGl2Pg0KPGRpdiBpZD0icGFnZSIgZWxlbWVudD0icGFnZSIgY2xhc3M9IiI+DQogICAgPGRpdiBpZD0icGFnZU9wdGlvbnMiIGVsZW1lbnQ9InBhZ2VPcHRpb25zIiBjbGFzcz0ic3R5bGVDb2xvclVwZGF0ZSI+DQogICAgICAgIDxkaXYgaWQ9ImF1dG9HZW5EaXNwbGF5VHlwZXMiIGVsZW1lbnQ9ImF1dG9HZW5EaXNwbGF5VHlwZXMiPjwvZGl2Pg0KICAgICAgICA8YnV0dG9uIGVsZW1lbnQ9InBhZ2VFZGl0Ij5FZGl0PC9idXR0b24+DQogICAgICAgIDxicj4NCiAgICAgICAgPGJ1dHRvbiBlbGVtZW50PSJnb0JhY2tIb21lIj5CYWNrPC9idXR0b24+DQogICAgPC9kaXY+DQogICAgPHAgaWQ9InBhZ2VVcmwiIGVsZW1lbnQ9InBhZ2VVcmwiIG9uY2xpY2s9IndpbmRvdy5vcGVuKHRoaXMuaW5uZXJUZXh0KSI+PC9wPg0KICAgIDxkaXYgaWQ9InBhZ2VDb250ZW50IiBlbGVtZW50PSJwYWdlQ29udGVudCI+DQogICAgICAgIDxwIGlkPSJwYWdlQ29udGVudFRpdGxlIiBlbGVtZW50PSJwYWdlQ29udGVudFRpdGxlIj48L3A+DQogICAgICAgIDxkaXYgaWQ9InBhZ2VDb250ZW50Qm9keSIgZWxlbWVudD0icGFnZUNvbnRlbnRCb2R5Ij4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQogICAgPGRpdiBpZD0iZWRpdFBhbmVsIiBlbGVtZW50PSJlZGl0UGFuZWwiIHN0eWxlPSJkaXNwbGF5OiBub25lOyIgY2xhc3M9InN0eWxlQ29sb3JVcGRhdGUiPg0KICAgICAgICA8ZGl2IGlkPSJlZGl0UGFuZWxSZW1vdmVUZXh0cyIgZWxlbWVudD0iZWRpdFBhbmVsUmVtb3ZlVGV4dHMiPg0KICAgICAgICAgICAgPGRpdiBpZD0iZWRpdFBhbmVsUmVtb3ZlVGV4dHNMaXN0IiBlbGVtZW50PSJlZGl0UGFuZWxSZW1vdmVUZXh0c0xpc3QiPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8aW5wdXQgaWQ9ImVkaXRQYW5lbFJlbW92ZVRleHRzSW5wdXQiIGVsZW1lbnQ9ImVkaXRQYW5lbFJlbW92ZVRleHRzSW5wdXQiIHR5cGU9InRleHQiIHBsYWNlaG9sZGVyPSJUZXh0IHRvIHJlbW92ZSI+DQogICAgICAgICAgICA8YnV0dG9uIGVsZW1lbnQ9ImFkZFJlbW92ZVRleHQiPkFkZDwvYnV0dG9uPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGJ1dHRvbiBlbGVtZW50PSJleGl0RWRpdFBhbmVsIj5FeGl0PC9idXR0b24+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPGRpdiBpZD0ic2VsZWN0IiBlbGVtZW50PSJzZWxlY3QiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgPGRpdiBpZD0ic2VsZWN0V3JhcGVyIiBlbGVtZW50PSJzZWxlY3RXcmFwZXIiPg0KICAgICAgICA8cCBpZD0ic2VsZWN0VGl0bGUiIGVsZW1lbnQ9InNlbGVjdFRpdGxlIj5UaXRsZTwvcD4NCiAgICAgICAgPGRpdiBpZD0ic2VsZWN0T3B0aW9ucyIgZWxlbWVudD0ic2VsZWN0T3B0aW9ucyI+DQoNCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxicj4NCiAgICAgICAgPGJ1dHRvbiBpZD0ic2VsZWN0Q2xvc2UiIGVsZW1lbnQ9InNlbGVjdENsb3NlIj5DbG9zZTwvYnV0dG9uPg0KICAgIDwvZGl2Pg0KPC9kaXY+", "install.js": "YXN5bmMgZnVuY3Rpb24gcnVuKCkgew0KICAgIC8vZmlsZSBleHRlbnNpb25zDQogICAgYXdhaXQgU3lzdGVtLm9wdGlvbnMuYWRkVmFsdWUoImZpbGVFeHRlbnNpb25PcGVuZXIiLCAicmh0bWwiLCAiYy9wcm9ncmFtcy9kb3dubG9hZFJlYWRlclYyL21haW4uanMiLCB0cnVlKTsgLy9yZWFkZXIgaHRtbA0KDQogICAgYXdhaXQgU3lzdGVtLm9wdGlvbnMuYWRkVmFsdWUoInByb2dyYW1zIiwgImRvd25sb2FkUmVhZGVyVjIiLCB7ICJwYXRoIjogImMvcHJvZ3JhbXMvZG93bmxvYWRSZWFkZXJWMi9tYWluLmpzIiwgIm5hbWUiOiAiRG93bmxvYWQgUmVhZGVyIiwgInJ1biI6ICJjL3Byb2dyYW1zL2Rvd25sb2FkUmVhZGVyVjIvcnVuLmpzIiB9LCB0cnVlKTsNCiAgICBTeXN0ZW1IdG1sLnVwZGF0ZVN0YXJ0bWVudSgpDQoNCiAgICAvL2Rlc2t0b3Agc2hvcnRjdXQNCiAgICBpZiAoIWF3YWl0IFN5c3RlbUh0bWwuZGVza3RvcC5leGlzdHNMaW5rKCJjL3Byb2dyYW1zL2Rvd25sb2FkUmVhZGVyVjIvcnVuLmpzIikpIHsNCiAgICAgICAgYXdhaXQgU3lzdGVtSHRtbC5kZXNrdG9wLmFkZExpbmsoImMvcHJvZ3JhbXMvZG93bmxvYWRSZWFkZXJWMi9ydW4uanMiLCAiRG93bmxvYWQgUmVhZGVyIiwgImMvcHJvZ3JhbXMvZG93bmxvYWRSZWFkZXJWMi9sb2dvLndlYnAiKTsNCiAgICB9DQogICAgcmV0dXJuIHRydWU7DQp9DQpydW4oKTs=", "installLocation.dat": "Yy9wcm9ncmFtcy9kb3dubG9hZFJlYWRlclYy", "logo.webp": "", "main.js": "", "purify.js": "", "Readability.js": "", "run.js": "U3lzdGVtLnByb2dyYW0ucnVuUHJvZ3JhbShQQVRILmZvbGRlcigpICsgIi9tYWluLmpzIik=", "style.css": ""}