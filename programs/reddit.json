{"api.js": "Y2xhc3MgcmVkZGl0IHsNCiAgICAvKioNCiAgICAgKiByZWRkaXQgcmVhZGVyIHdpdGggb25seSBvbmUgcG9zdCBldmVyeSByZXF1ZXN0DQogICAgICogQHBhcmFtIHtzdHJpbmdbXX0gc3VicmVkZGl0cyANCiAgICAgKi8NCiAgICBjb25zdHJ1Y3RvcihzdWJyZWRkaXRzKSB7DQogICAgICAgIHRoaXMuc3VicmVkZGl0cyA9IHN1YnJlZGRpdHM7DQogICAgICAgIHRoaXMuY3VycmVudFN1YnJlZGRpdElkID0gMDsNCg0KICAgICAgICB0aGlzLmJvb2xWYXJzID0gWyJvbmx5X2ltYWdlcyIsICJzYXZlX2RhdGEiLCAibm9fbnNmdyJdDQogICAgICAgIHRoaXMudmFycyA9IHsgImxpbWl0IjogIjEwIiwgInNvcnRfdGltZSI6ICJhbGwiLCAic29ydF9ieSI6ICJob3QiLCAib25seV9pbWFnZXMiOiBmYWxzZSwgInNhdmVfZGF0YSI6IGZhbHNlLCAibm9fbnNmdyI6IGZhbHNlLCAibmVlZHNfYm9vbF9hcmd1bWVudCI6ICIiIH07DQoNCiAgICAgICAgdGhpcy5hbGxyZWFkeUZldGNoaW5nID0gZmFsc2U7DQoNCg0KICAgICAgICB0aGlzLmdlbkFmdGVycygpOw0KICAgIH0NCiAgICBnZW5BZnRlcnMoKSB7DQogICAgICAgIHRoaXMuc3RvcmVkUG9zdHMgPSBbXTsNCiAgICAgICAgdGhpcy5hZnRlciA9IFtdDQogICAgICAgIGZvciAodmFyIHggb2YgdGhpcy5zdWJyZWRkaXRzKSB7DQogICAgICAgICAgICB0aGlzLmFmdGVyLnB1c2goIiIpOw0KICAgICAgICAgICAgdGhpcy5zdG9yZWRQb3N0cy5wdXNoKFtdKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHRpbWVvdXQobXMpIHsNCiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpOw0KICAgIH0NCg0KICAgIHNldFN1YnJlZGRpdHMoc3VicmVkZGl0cykgew0KICAgICAgICB0aGlzLnN1YnJlZGRpdHMgPSBzdWJyZWRkaXRzOw0KICAgICAgICB0aGlzLmdlbkFmdGVycygpOw0KICAgIH0NCg0KDQogICAgLyoqDQogICAgICogZ2V0cyBhIHBvc3QgZnJvbSBhIHN1YnJlZGRpdCB3aXRoIHRoZSBzcGVjZWZpZWQgaWQNCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgZnJvbSB0aGlzLnN1YnJlZGRpdHMNCiAgICAgKiBAcmV0dXJucyB7e3N0cmluZzpzdHJpbmcgfCBzdHJpbmdbXSB8IG51bWJlcn19IHRoZSBzdGFuZGFyZCByZWRkaXQgcmVzcG9zZSBmb3IgYSBwb3N0DQogICAgICovDQogICAgYXN5bmMgZ2V0KGlkKSB7DQogICAgICAgIC8vY2hlY2sgaWYgYWxscmVhZHkgaW4gY2FjaGUNCiAgICAgICAgaWYgKHRoaXMuc3RvcmVkUG9zdHNbaWRdLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgIHJldHVybiBbdGhpcy5zdG9yZWRQb3N0c1tpZF0uc2hpZnQoKSwgbnVsbF07DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLmFsbHJlYWR5RmV0Y2hpbmcgPSB0cnVlOw0KDQogICAgICAgIHZhciB1cmwgPSB0aGlzLmdlblVybCh0aGlzLnN1YnJlZGRpdHNbaWRdLCB0aGlzLmFmdGVyW2lkXSwgdGhpcy52YXJzWyJsaW1pdCJdLCB0aGlzLnZhcnNbInNvcnRfdGltZSJdLCB0aGlzLnZhcnNbInNvcnRfYnkiXSk7DQogICAgICAgIHZhciBkYXQgPSBhd2FpdCBmZXRjaCh1cmwpOw0KICAgICAgICBkYXQgPSBKU09OLnBhcnNlKGF3YWl0IGRhdC50ZXh0KCkpDQoNCiAgICAgICAgdmFyIG5ld0FmdGVyID0gZGF0WyJkYXRhIl1bImFmdGVyIl07DQoNCiAgICAgICAgdmFyIGFsbFN0dWZmID0gZGF0WyJkYXRhIl1bImNoaWxkcmVuIl0NCg0KICAgICAgICBpZiAoYWxsU3R1ZmYubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgIGNvbnNvbGUud2FybigicmF0ZWxpbWl0OiB0aW1lb3V0IDIwMDBtcyIpDQogICAgICAgICAgICBhd2FpdCB0aGlzLnRpbWVvdXQoMjAwMCk7DQogICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoaWQpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGFsbFN0dWZmLmxlbmd0aCA+IDEpIHsNCiAgICAgICAgICAgIHZhciBvdGhlclBvc3RzID0gYWxsU3R1ZmYuc2xpY2UoMSk7DQogICAgICAgICAgICB0aGlzLnN0b3JlZFBvc3RzW2lkXSA9IG90aGVyUG9zdHM7DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLmFsbHJlYWR5RmV0Y2hpbmcgPSBmYWxzZTsNCiAgICAgICAgcmV0dXJuIFthbGxTdHVmZlswXSwgbmV3QWZ0ZXJdOw0KICAgIH0NCg0KICAgIGFzeW5jIG5leHQoKSB7DQogICAgICAgIHZhciByID0gYXdhaXQgdGhpcy5nZXQodGhpcy5jdXJyZW50U3VicmVkZGl0SWQpOw0KICAgICAgICB2YXIgZGF0ID0gclswXTsNCiAgICAgICAgdmFyIG5ld0FmdGVyID0gclsxXTsNCiAgICAgICAgaWYgKG5ld0FmdGVyICE9IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgdGhpcy5hZnRlclt0aGlzLmN1cnJlbnRTdWJyZWRkaXRJZF0gPSBuZXdBZnRlcjsNCiAgICAgICAgfQ0KICAgICAgICB2YXIgcCA9IG5ldyBwb3N0KGRhdCk7DQogICAgICAgIHAuc2F2ZURhdGEgPSB0aGlzLnZhcnNbInNhdmVfZGF0YSJdOw0KICAgICAgICBpZiAoKHRoaXMudmFyc1sib25seV9pbWFnZXMiXSAmJiBwLkltYWdlKCkubGVuZ3RoID09IDApIHx8ICh0aGlzLnZhcnNbIm5vX25zZnciXSAmJiBwLmRhdGFbIm92ZXJfMTgiXSkpIHsNCiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLm5leHQoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAodGhpcy52YXJzWyJuZWVkc19ib29sX2FyZ3VtZW50Il0gIT0gIiIpIHsNCiAgICAgICAgICAgIGZvciAodmFyIHggb2YgdGhpcy52YXJzWyJuZWVkc19ib29sX2FyZ3VtZW50Il0uc3BsaXQoIiwiKSkgew0KICAgICAgICAgICAgICAgIGlmICghcC5kYXRhW3hdKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLm5leHQoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLmN1cnJlbnRTdWJyZWRkaXRJZCsrOw0KICAgICAgICBpZiAodGhpcy5jdXJyZW50U3VicmVkZGl0SWQgPj0gdGhpcy5zdWJyZWRkaXRzLmxlbmd0aCkgeyB0aGlzLmN1cnJlbnRTdWJyZWRkaXRJZCA9IDA7IH0NCiAgICAgICAgcmV0dXJuIHA7DQogICAgfQ0KICAgIGdlblVybChzdWJyZWRkaXQsIGFmdGVyLCBsaW1pdCwgc29ydF90aW1lLCBzb3J0X2J5KSB7DQogICAgICAgIHJldHVybiAnaHR0cHM6Ly93d3cucmVkZGl0LmNvbS9yLycgKyBzdWJyZWRkaXQgKyAnLycgKyBzb3J0X2J5ICsgJy8uanNvbj9yYXdfanNvbj0xJnQ9JyArIHNvcnRfdGltZSArICcmbGltaXQ9JyArIGxpbWl0ICsgIiZhZnRlcj0iICsgYWZ0ZXI7DQogICAgfQ0KICAgIGdldFBvc3RGcm9tRGF0YShkYXRhKSB7DQogICAgICAgIHZhciBwID0gbmV3IHBvc3QoZGF0YSk7DQogICAgICAgIHAuc2F2ZURhdGEgPSB0aGlzLnZhcnNbInNhdmVfZGF0YSJdOw0KICAgICAgICByZXR1cm4gcA0KICAgIH0NCn0NCmNsYXNzIHBvc3Qgew0KICAgIGNvbnN0cnVjdG9yKGRhdGEpIHsNCiAgICAgICAgdGhpcy5kYXRhID0gZGF0YVsiZGF0YSJdOw0KICAgICAgICB0aGlzLnNhdmVEYXRhID0gZmFsc2UNCiAgICB9DQoNCiAgICBJbWFnZSgpIHsNCiAgICAgICAgdmFyIGltZ3MgPSBbXTsNCiAgICAgICAgaWYgKCJtZWRpYV9tZXRhZGF0YSIgaW4gdGhpcy5kYXRhKSB7DQogICAgICAgICAgICBmb3IgKHggaW4gdGhpcy5kYXRhWyJtZWRpYV9tZXRhZGF0YSJdKSB7DQogICAgICAgICAgICAgICAgaWYgKHRoaXMuc2F2ZURhdGEgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICAgICAgICAgaW1ncy5wdXNoKHRoaXMuZGF0YVsibWVkaWFfbWV0YWRhdGEiXVt4XVsicyJdWyJ1Il0pOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHAgPSBNYXRoLnJvdW5kKHRoaXMuZGF0YVsibWVkaWFfbWV0YWRhdGEiXVt4XVsicCJdLmxlbmd0aCAvIDQpOw0KICAgICAgICAgICAgICAgICAgICAvL3AgPSA0Ow0KICAgICAgICAgICAgICAgICAgICBpbWdzLnB1c2godGhpcy5kYXRhWyJtZWRpYV9tZXRhZGF0YSJdW3hdWyJwIl1bcF1bInUiXSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmICgicHJldmlldyIgaW4gdGhpcy5kYXRhICYmIHRoaXMuc2F2ZURhdGEgPT0gdHJ1ZSkgew0KICAgICAgICAgICAgZm9yICh2YXIgeCBpbiB0aGlzLmRhdGFbInByZXZpZXciXVsiaW1hZ2VzIl0pIHsNCiAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuZGF0YVsicHJldmlldyJdWyJpbWFnZXMiXVt4XVsicmVzb2x1dGlvbnMiXTsNCiAgICAgICAgICAgICAgICB2YXIgcCA9IE1hdGgucm91bmQoYS5sZW5ndGggLyA0KTsNCiAgICAgICAgICAgICAgICBpZiAoYS5pbmNsdWRlcyhwKSkgew0KICAgICAgICAgICAgICAgICAgICBpbWdzLnB1c2goYVtwXVsidXJsIl0pOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChhLmxlbmd0aCAhPSAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbWdzLnB1c2goYVswXVsidXJsIl0pOw0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSBpZiAoInVybCIgaW4gdGhpcy5kYXRhKSB7DQogICAgICAgICAgICB0aGlzLmRhdGFbInVybCJdID0gdGhpcy5kYXRhWyJ1cmwiXS5yZXBsYWNlKCJnaWZ2IiwgImpwZyIpDQogICAgICAgICAgICBpZiAoIXRoaXMuZGF0YVsidXJsIl0ubWF0Y2goLy4oanBnfGpwZWd8cG5nfGdpZikkL2kpKSB7IH0gZWxzZSB7DQogICAgICAgICAgICAgICAgaW1ncy5wdXNoKHRoaXMuZGF0YVsidXJsIl0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IC8vdXJsX292ZXJyaWRkZW5fYnlfZGVzdA0KICAgICAgICByZXR1cm4gaW1ncw0KICAgIH0NCiAgICBJbWFnZUZ1bGwoKSB7DQogICAgICAgIC8vZGlzYWJsZSBzYXZlZGF0YQ0KICAgICAgICB2YXIgcyA9IHRoaXMuc2F2ZURhdGENCiAgICAgICAgdGhpcy5zYXZlRGF0YSA9IGZhbHNlOw0KDQogICAgICAgIHZhciBkID0gdGhpcy5JbWFnZSgpOw0KDQogICAgICAgIC8vcmUtZW5hYmFsZSBzYXZlZGF0YQ0KICAgICAgICB0aGlzLnNhdmVEYXRhID0gczsNCiAgICAgICAgcmV0dXJuIGQ7DQogICAgfQ0KICAgIEF1dGhvcigpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVsiYXV0aG9yIl07DQogICAgfQ0KICAgIFRpdGxlKCkgew0KICAgICAgICByZXR1cm4gdGhpcy5kYXRhWyJ0aXRsZSJdOw0KICAgIH0NCiAgICBUZXh0KCkgew0KICAgICAgICByZXR1cm4gdGhpcy5kYXRhWyJzZWxmdGV4dCJdOw0KICAgIH0NCiAgICBIdG1sVGV4dCgpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVsic2VsZnRleHRfaHRtbCJdOw0KICAgIH0NCiAgICBhc3luYyBjb21tZW50cygpIHsNCiAgICAgICAgdmFyIGNvbW1lbnRMaW5rID0gImh0dHBzOi8vd3d3LnJlZGRpdC5jb20iICsgdGhpcy5kYXRhLnBlcm1hbGluayArICIuanNvbj9yYXdfanNvbj0xIjsNCiAgICAgICAgdmFyIHRleHQgPSBhd2FpdCAoYXdhaXQgZmV0Y2goY29tbWVudExpbmspKS50ZXh0KCkNCiAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKHRleHQpOw0KICAgICAgICB2YXIgZGF0ID0ganNvblsiMSJdWyJkYXRhIl1bImNoaWxkcmVuIl07DQogICAgICAgIHJldHVybiB0aGlzLmxvYWRDb21tZW50RWFzeShkYXQpOw0KICAgIH0NCiAgICBtZWRpYSgpIHsNCiAgICAgICAgaWYgKHRoaXMuZGF0YVsibWVkaWEiXSAhPSBudWxsKSB7DQogICAgICAgICAgICBpZiAodGhpcy5kYXRhWyJtZWRpYSJdWyJ0eXBlIl0gPT0gInlvdXR1YmUuY29tIikgew0KICAgICAgICAgICAgICAgIHJldHVybiB7ICJ0eXBlIjogInlvdXR1YmUiLCAiZGF0IjogdGhpcy5kYXRhWyJtZWRpYSJdWyJvZW1iZWQiXVsiaHRtbCJdIH07DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmICh0aGlzLmRhdGFbImlzX3ZpZGVvIl0gPT0gdHJ1ZSkgew0KICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGFbIm1lZGlhIl1bInJlZGRpdF92aWRlbyJdID09IHVuZGVmaW5lZCkgeyByZXR1cm4gZmFsc2U7IH0NCiAgICAgICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgICAgICB0eXBlOiAicmVkZGl0VmlkZW8iLCAiZGF0IjogWw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhWyJtZWRpYSJdWyJyZWRkaXRfdmlkZW8iXVsiZmFsbGJhY2tfdXJsIl0sDQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFbIm1lZGlhIl1bInJlZGRpdF92aWRlbyJdWyJmYWxsYmFja191cmwiXS5zcGxpdCgiREFTSF8iKVswXSArICJEQVNIX2F1ZGlvLm1wNCINCiAgICAgICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQogICAgbG9hZENvbW1lbnRFYXN5KGRhdCkgew0KICAgICAgICB2YXIgb3V0ID0gW107DQogICAgICAgIGZvciAodmFyIHggb2YgZGF0KSB7DQogICAgICAgICAgICB2YXIgY29tbWVudCA9IHsgImF1dGhvciI6ICItIiwgImJvZHlfaHRtbCI6ICI8cD4tPC9wPiIsICJib2R5IjogIiIsICJyZXBsaWVzIjogW10gfQ0KICAgICAgICAgICAgdmFyIGRhdGEgPSB4WyJkYXRhIl0NCiAgICAgICAgICAgIHZhciByZXBsaWVzID0gW10NCiAgICAgICAgICAgIGlmIChkYXRhWyJyZXBsaWVzIl0gIT0gIiIgJiYgZGF0YVsicmVwbGllcyJdICE9IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgIHJlcGxpZXMgPSB0aGlzLmxvYWRDb21tZW50RWFzeShkYXRhWyJyZXBsaWVzIl1bImRhdGEiXVsiY2hpbGRyZW4iXSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjb21tZW50WyJhdXRob3IiXSA9IGRhdGFbImF1dGhvciJdDQogICAgICAgICAgICBjb21tZW50WyJib2R5X2h0bWwiXSA9IGRhdGFbImJvZHlfaHRtbCJdDQogICAgICAgICAgICBjb21tZW50WyJib2R5Il0gPSBkYXRhWyJib2R5Il0NCiAgICAgICAgICAgIGNvbW1lbnRbInJlcGxpZXMiXSA9IHJlcGxpZXM7DQogICAgICAgICAgICBvdXQucHVzaChjb21tZW50KQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBvdXQ7DQogICAgfQ0KDQp9DQoNCg0KcmVkZGl0Ow==", "html.html": "PHN0eWxlPg0KICAgIC5yZWRkaXRDb21tZW50OmhvdmVyIHsNCiAgICAgICAgLypiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhbWFyaW5lOyovDQogICAgICAgIGJvcmRlci1sZWZ0OiA1cHggZG90dGVkICMwMDAwZmY7DQogICAgfQ0KDQogICAgLnJlZGRpdENvbW1lbnQgew0KICAgICAgICBib3JkZXItbGVmdDogNXB4IGRvdHRlZCAjQzNDM0M1Ow0KICAgIH0NCjwvc3R5bGU+DQoNCjxkaXYgZWxlbWVudD0ic2V0dGluZ3MiPg0KICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0ic3VicmVkZGl0cyAoYSxiLGMpIiBlbGVtZW50PSJzdWJyZWRkaXRTZWxlY3QiIHZhbHVlPSJtZW1lcyI+DQogICAgPGJyPg0KICAgIDxsYWJsZSBmb3I9InNvcnRfdGltZSI+c29ydF90aW1lPC9sYWJsZT4NCiAgICA8c2VsZWN0IGVsZW1lbnQ9InZhcmlhYmxlIiBuYW1lPSJzb3J0X3RpbWUiPg0KICAgICAgICA8b3B0aW9uIHZhbHVlPSJhbGwiPmFsbDwvb3B0aW9uPg0KICAgICAgICA8b3B0aW9uIHZhbHVlPSJ5ZWFyIj55ZWFyPC9vcHRpb24+DQogICAgICAgIDxvcHRpb24gdmFsdWU9Im1vbnRoIj5tb250aDwvb3B0aW9uPg0KICAgICAgICA8b3B0aW9uIHZhbHVlPSJ3ZWVrIj53ZWVrPC9vcHRpb24+DQogICAgICAgIDxvcHRpb24gdmFsdWU9ImRheSI+ZGF5PC9vcHRpb24+DQogICAgICAgIDxvcHRpb24gdmFsdWU9ImhvdXIiPmhvdXI8L29wdGlvbj4NCiAgICA8L3NlbGVjdD4NCiAgICA8YnI+DQoNCiAgICA8bGFibGUgZm9yPSJzb3J0X2J5Ij5zb3J0X2J5PC9sYWJsZT4NCiAgICA8c2VsZWN0IGVsZW1lbnQ9InZhcmlhYmxlIiBuYW1lPSJzb3J0X2J5Ij4NCiAgICAgICAgPG9wdGlvbiB2YWx1ZT0iaG90Ij5ob3Q8L29wdGlvbj4NCiAgICAgICAgPG9wdGlvbiB2YWx1ZT0ibmV3Ij5uZXc8L29wdGlvbj4NCiAgICAgICAgPG9wdGlvbiB2YWx1ZT0idG9wIj50b3A8L29wdGlvbj4NCiAgICAgICAgPG9wdGlvbiB2YWx1ZT0icmlzaW5nIj5yaXNpbmc8L29wdGlvbj4NCiAgICA8L3NlbGVjdD4NCiAgICA8YnI+DQoNCiAgICA8aW5wdXQgbmFtZT0ibmVlZHNfYm9vbF9hcmd1bWVudCIgY2xhc3M9InZhcmlhYmxlIg0KICAgICAgICBwbGFjZWhvbGRlcj0idmVyeSBvcHRpb25hbCB8IG5lZWRzX2Jvb2xfYXJndW1lbnQ9dHJ1ZSAoc3BsaXQgd2l0aCAnLCcpIj4NCiAgICA8YnI+DQoNCiAgICA8bGFibGUgZm9yPSJvbmx5X2ltYWdlcyI+b25seV9pbWFnZXM8L2xhYmxlPg0KICAgIDxpbnB1dCBlbGVtZW50PSJ2YXJpYWJsZSIgbmFtZT0ib25seV9pbWFnZXMiIHR5cGU9ImNoZWNrYm94Ij4NCiAgICA8YnI+DQoNCiAgICA8bGFibGUgZm9yPSJzYXZlX2RhdGEiPnNhdmVfZGF0YTwvbGFibGU+DQogICAgPGlucHV0IGVsZW1lbnQ9InZhcmlhYmxlIiBuYW1lPSJzYXZlX2RhdGEiIHR5cGU9ImNoZWNrYm94Ij4NCiAgICA8YnI+DQoNCg0KICAgIDxpbnB1dCBlbGVtZW50PSJ2YXJpYWJsZSIgbmFtZT0ibGltaXQiIHBsYWNlaG9sZGVyPSJudW1iZXI6IGxpbWl0IiB2YWx1ZT0iMTAiPg0KICAgIDxicj4NCg0KICAgIDxidXR0b24gZWxlbWVudD0ic2VsZWN0U3VicmVkZGl0cyI+T2s8L2J1dHRvbj4NCjwvZGl2Pg0KPGRpdiBlbGVtZW50PSJwb3N0Ij4NCiAgICA8YSB0YXJnZXQ9Il9ibGFuayIgZWxlbWVudD0ibGluayI+PC9hPg0KICAgIDxidXR0b24gZWxlbWVudD0ib3BlblJlZGRpdCI+ZnVsbDwvYnV0dG9uPg0KICAgIDxoMSBlbGVtZW50PSJ0aXRsZSIgc3R5bGU9ImZvbnQtd2VpZ2h0OiBib2xkOyI+VGl0bGU8L2gxPg0KICAgIDxwIGVsZW1lbnQ9InRleHQiPlRleHQ8L3A+DQoNCiAgICA8YnV0dG9uIGVsZW1lbnQ9J29wZW5WaWQnIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+b3BlbiB2aWRlbzwvYnV0dG9uPg0KICAgIDxkaXYgZWxlbWVudD0iaW1nIiBzdHlsZT0ibWF4LXdpZHRoOiA1MDBweDsiPjwvZGl2Pg0KDQogICAgPGJ1dHRvbiBlbGVtZW50PSJuZXh0IiBzdHlsZT0iDQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIGJvdHRvbTogMTBweDsNCiAgICBoZWlnaHQ6IDUwcHg7DQogICAgZm9udC1zaXplOiA1MHB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6IGFudGlxdWV3aGl0ZTsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgcmlnaHQ6IDEwcHg7DQogICAgIj5uZXh0PC9idXR0b24+DQogICAgPGJ1dHRvbiBlbGVtZW50PSJiYWNrIiBzdHlsZT0iDQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIGJvdHRvbTogMTBweDsNCiAgICBoZWlnaHQ6IDUwcHg7DQogICAgZm9udC1zaXplOiA1MHB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6IGFudGlxdWV3aGl0ZTsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7DQogICAgbGVmdDogMTBweDsNCiAgICAiPmJhY2s8L2J1dHRvbj4NCiAgICA8YnI+DQogICAgPGJ1dHRvbiBlbGVtZW50PSJjb21tZW50cyI+Y29tbWVudHM8L2J1dHRvbj4NCiAgICA8aHI+DQogICAgPGJ1dHRvbiBlbGVtZW50PSJvcGVuU2V0dGluZ3MiIHN0eWxlPSJmbG9hdDogbGVmdDsgcGFkZGluZy1ib3R0b206IDU4cHg7Ij5zZXR0aW5nczwvYnV0dG9uPg0KICAgIDxicj4NCjwvZGl2Pg==", "install.js": "YXN5bmMgZnVuY3Rpb24gcnVuKCkgew0KICAgIC8vZmlsZSBleHRlbnNpb25zDQogICAgYXdhaXQgU3lzdGVtLm9wdGlvbnMuYWRkVmFsdWUoInByb2dyYW1zIiwgInJlZGRpdCIsIHsgInBhdGgiOiAiYy9wcm9ncmFtcy9yZWRkaXQvbWFpbi5qcyIsICJuYW1lIjogIlJlZGRpdCIsICJydW4iOiAiYy9wcm9ncmFtcy9yZWRkaXQvcnVuLmpzIiB9LCB0cnVlKTsNCiAgICBTeXN0ZW1IdG1sLnVwZGF0ZVN0YXJ0bWVudSgpDQogICAgaWYgKCEoYXdhaXQgU3lzdGVtRmlsZVN5c3RlbS5maWxlRXhpc3RzKCJjL3VzZXIvcmVkZGl0L29sZC5qc29uIikpKSB7DQogICAgICAgIGNvbnNvbGUubG9nKCJud2UgRmlsZSIpOw0KICAgICAgICBhd2FpdCBTeXN0ZW1GaWxlU3lzdGVtLnNldEZpbGVTdHJpbmcoImMvdXNlci9yZWRkaXQvb2xkLmpzb24iLCAnWyJfIl0nKTsNCiAgICB9DQogICAgaWYgKCEoYXdhaXQgU3lzdGVtRmlsZVN5c3RlbS5maWxlRXhpc3RzKCJjL3VzZXIvcmVkZGl0L3NldHRpbmdzLmpzb24iKSkpIHsNCiAgICAgICAgY29uc29sZS5sb2coIm53ZSBGaWxlIik7DQogICAgICAgIGF3YWl0IFN5c3RlbUZpbGVTeXN0ZW0uc2V0RmlsZVN0cmluZygiYy91c2VyL3JlZGRpdC9zZXR0aW5ncy5qc29uIiwgJ3sibGltaXQiOiAiMTAiLCJzb3J0X3RpbWUiOiAiYWxsIiwic29ydF9ieSI6ICJob3QiLCJvbmx5X2ltYWdlcyI6IGZhbHNlLCJzYXZlX2RhdGEiOiBmYWxzZSwibm9fbnNmdyI6IGZhbHNlLCJuZWVkc19ib29sX2FyZ3VtZW50IjogIiIsInN1YnJlZGRpdHMiOiAibWVtZXMifScpOw0KICAgIH0NCiAgICByZXR1cm4gdHJ1ZTsNCn0NCnJ1bigpOw==", "installLocation.dat": "Yy9wcm9ncmFtcy9yZWRkaXQ=", "main.js": "", "run.js": "U3lzdGVtLnByb2dyYW0ucnVuUHJvZ3JhbShQQVRILmZvbGRlcigpICsgIi9tYWluLmpzIik="}