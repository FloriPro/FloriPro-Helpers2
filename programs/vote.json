{"create.html": "PGRpdiBlbGVtZW50PSJhbGwiPg0KICAgIDxkaXY+DQogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJ0aXRsZSIgZWxlbWVudD0idGl0bGUiIHBsYWNlaG9sZGVyPSJUaXRsZSI+DQogICAgICAgIDxicj4NCiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9ImRlc2NyaXB0aW9uIiBlbGVtZW50PSJkZXNjcmlwdGlvbiIgcGxhY2Vob2xkZXI9IkRlc2NyaXB0aW9uIj4NCiAgICAgICAgPGJyPg0KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ib3B0aW9ucyIgZWxlbWVudD0ib3B0aW9ucyIgcGxhY2Vob2xkZXI9Ik9wdGlvbnMgKGE7YjtjKSI+DQogICAgICAgIDxicj4NCiAgICAgICAgPGRpdiBzdHlsZT0iZGlzcGxheTpmbGV4OyI+DQogICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0icHJwYXNzd29yZCIgZWxlbWVudD0icHJwYXNzd29yZCIgcGxhY2Vob2xkZXI9InBhc3N3b3JkIGZvciByZXN1bHRzIj4NCiAgICAgICAgICAgIDxwPihlbXB0eSBmb3Igbm8pPC9wPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGJyPg0KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ic2hvd1R5cGUiIGVsZW1lbnQ9InNob3dUeXBlIiBwbGFjZWhvbGRlcj0ic2hvdyB0eXBlIChiYXIsIHBpZSwgLi4uKSIgdmFsdWU9ImJhciI+DQogICAgICAgIDxicj4NCiAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJ6ZXJvIiBlbGVtZW50PSJ6ZXJvIiBjaGVja2VkPg0KICAgICAgICA8bGFiZWwgZm9yPSJ6ZXJvIj5iZWdpbm4gYXQgemVybzwvbGFiZWw+DQogICAgICAgIDxicj4NCiAgICA8L2Rpdj4NCg0KICAgIDxidXR0b24gZWxlbWVudD0iY3JlYXRlIj5DcmVhdGU8L2J1dHRvbj4NCjwvZGl2Pg==", "html.html": "PGRpdiBlbGVtZW50PSJsb2FkZXIiPg0KICAgIDxidXR0b24gZWxlbWVudD0iY3JlYXRlQnV0dG9uIj5DcmVhdGUgcG9sbDwvYnV0dG9uPg0KICAgIDxidXR0b24gZWxlbWVudD0iY3JlYXRlQ2xvdWRCdXR0b24iPkNyZWF0ZSBXb3JkY2xvdWQ8L2J1dHRvbj4NCiAgICA8aHI+DQogICAgPHA+VmlldzwvcD4NCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgZWxlbWVudD0idXJsIiBwbGFjZWhvbGRlcj0idm90ZSB1cmwiIC8+DQogICAgPGJ1dHRvbiBlbGVtZW50PSJsb2FkIj5Mb2FkPC9idXR0b24+DQogICAgPGhyPg0KICAgIDxkaXYgZWxlbWVudD0ib2xkQ2hhcnRzIiBzcGVjaWFsPSJpc09nIj4NCg0KICAgIDwvZGl2Pg0KICAgIDxicj4NCiAgICA8YnV0dG9uIGVsZW1lbnQ9ImFkZFZvdGUiPkFkZCB2b3RlPC9idXR0b24+DQogICAgPGhyPg0KICAgIDxicj4NCiAgICA8YnI+DQoNCiAgICA8cD5DaGFydHMgYnkgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LmNoYXJ0anMub3JnLyI+Y2hhcnRzLmpzPC9hPjwvcD4NCiAgICA8cD5Xb3JkY2xvdWQgYnkgPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vd3d3LmFueWNoYXJ0LmNvbS8iPmFueWNoYXJ0PC9hPjwvcD4NCiAgICA8cD5RUi1Db2RlcyBieSA8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL25lb2NvdGljL3FyaW91cyI+cXJpb3VzPC9hPjwvcD4NCjwvZGl2Pg0KPGRpdiBlbGVtZW50PSJvdXQiIHN0eWxlPSJoZWlnaHQ6MTAwJTt3aWR0aDogMTAwJTtkaXNwbGF5Om5vbmU7Ij4NCiAgICA8Y2FudmFzIHN0eWxlPSJkaXNwbGF5OiBub25lOyIgZWxlbWVudD0ibXlDaGFydCIgd2lkdGg9IjQwMCIgaGVpZ2h0PSI0MDAiPjwvY2FudmFzPg0KICAgIDxkaXYgaWQ9Il9sb2FkaW5nQ29udGFpbmVyIiBlbGVtZW50PSJjb250YWluZXIiIHN0eWxlPSJkaXNwbGF5OiBub25lO2hlaWdodDogMTAwJTt3aWR0aDogMTAwJTsiPjwvZGl2Pg0KPC9kaXY+", "install.js": "YXN5bmMgZnVuY3Rpb24gcnVuKCkgew0KICAgIGF3YWl0IFN5c3RlbS5vcHRpb25zLmFkZFZhbHVlKCJwcm9ncmFtcyIsICJ2b3RlIiwgeyAicGF0aCI6ICJjL3Byb2dyYW1zL3ZvdGUvbWFpbi5qcyIsICJuYW1lIjogIlZvdGUiLCAicnVuIjogImMvcHJvZ3JhbXMvdm90ZS9ydW4uanMiIH0sIHRydWUpOw0KICAgIFN5c3RlbUh0bWwudXBkYXRlU3RhcnRtZW51KCkNCg0KICAgIC8vZGVza3RvcCBzaG9ydGN1dA0KICAgIGlmICghYXdhaXQgU3lzdGVtSHRtbC5kZXNrdG9wLmV4aXN0c0xpbmsoImMvcHJvZ3JhbXMvdm90ZS9ydW4uanMiKSkgew0KICAgICAgICBhd2FpdCBTeXN0ZW1IdG1sLmRlc2t0b3AuYWRkTGluaygiYy9wcm9ncmFtcy92b3RlL3J1bi5qcyIsICJWb3RlIiwgImMvcHJvZ3JhbXMvdm90ZS9sb2dvLndlYnAiKTsNCiAgICB9DQoNCiAgICAvL2luc3RhbGwgbGlicw0KICAgIC8vKiBhbnljaGFydA0KICAgIC8vKiBxcmNvZGVqcw0KICAgIC8vKiBjaGFydGpzDQogICAgYXdhaXQgU3lzdGVtLnByb2dyYW0ubGliSW5zdGFsbCgiYW55Y2hhcnQiKTsNCiAgICBhd2FpdCBTeXN0ZW0ucHJvZ3JhbS5saWJJbnN0YWxsKCJxcmlvdXMiKTsNCiAgICBhd2FpdCBTeXN0ZW0ucHJvZ3JhbS5saWJJbnN0YWxsKCJjaGFydGpzIik7DQoNCiAgICAvL2FkZCBjL3VzZXIvdm90ZS9wb2xscy5qc29uIHRvIHBlcnNpc3RhbmRGaWxlcy5qc29uIGZpbGUNCiAgICB2YXIgcGVyc2lzdGFudEZpbGVzID0gYXdhaXQgU3lzdGVtRmlsZVN5c3RlbS5nZXRGaWxlSnNvbigiYy9wZXJzaXN0YW5kRmlsZXMuanNvbiIpOw0KICAgIGlmICghcGVyc2lzdGFudEZpbGVzLmluY2x1ZGVzKCJjL3VzZXIvdm90ZS9wb2xscy5qc29uIikpIHsNCiAgICAgICAgcGVyc2lzdGFudEZpbGVzLnB1c2goImMvdXNlci92b3RlL3BvbGxzLmpzb24iKTsNCiAgICAgICAgYXdhaXQgU3lzdGVtRmlsZVN5c3RlbS5zZXRGaWxlU3RyaW5nKCJjL3BlcnNpc3RhbmRGaWxlcy5qc29uIiwgSlNPTi5zdHJpbmdpZnkocGVyc2lzdGFudEZpbGVzKSk7DQogICAgfQ0KDQoNCiAgICByZXR1cm4gdHJ1ZTsNCn0NCnJ1bigpOw==", "installLocation.dat": "Yy9wcm9ncmFtcy92b3Rl", "logo.webp": "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", "main.js": "", "network.js": "Y2xhc3MgbiB7DQogICAgY29uc3RydWN0b3IoKSB7DQogICAgICAgIHRoaXMuY3JlYXRlKCk7DQogICAgICAgIHRoaXMub251cGRhdGUgPSAoZGF0YSkgPT4geyB9Ow0KICAgICAgICB0aGlzLnRyaWVzID0gMDsNCiAgICAgICAgdGhpcy5jdXJyZW50UG9sbCA9IG51bGw7DQogICAgfQ0KDQogICAgY3JlYXRlKCkgew0KICAgICAgICB0aGlzLndzID0gbmV3IFdlYlNvY2tldCgid3NzOi8vdm90ZS5mbHVsdS5ldS9hcGkvd3MvdXBkYXRlTGlzdGVuZXIiKTsNCiAgICAgICAgdGhpcy53cy5vbm1lc3NhZ2UgPSAobXNnKSA9PiB7DQogICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UobXNnLmRhdGEpOw0KICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7DQogICAgICAgICAgICB0aGlzLm9udXBkYXRlKGRhdGEpOw0KICAgICAgICB9DQoNCiAgICAgICAgdGhpcy53cy5vbm9wZW4gPSAoKSA9PiB7DQogICAgICAgICAgICB0aGlzLnRyaWVzID0gMDsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJ3cyBvcGVuIik7DQoNCiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQb2xsICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICB0aGlzLnNldFBvbGwodGhpcy5jdXJyZW50UG9sbCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvL3JlbG9hZCBvbiB3cyBjbG9zZQ0KICAgICAgICB0aGlzLndzLm9uY2xvc2UgPSAoZXJyKSA9PiB7DQogICAgICAgICAgICBpZiAoZXJyLndhc0NsZWFuKSB7DQogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIndzIGNsb3NlZCIpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmllcyA8IDUwMDApIHsNCiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWVzKys7DQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZSgpOw0KICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLndzLm9uZXJyb3IgPSAoZXJyKSA9PiB7DQogICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOw0KICAgICAgICB9DQogICAgfQ0KDQoNCiAgICAvL3NldCBwb2xsIHRvIGxpc3RlbiB0bw0KICAgIHNldFBvbGwocG9sbElkKSB7DQogICAgICAgIHRoaXMuY3VycmVudFBvbGwgPSBwb2xsSWQ7DQogICAgICAgIC8vc2VuZCB0byBzZXJ2ZXINCiAgICAgICAgdGhpcy5zZW5kKEpTT04uc3RyaW5naWZ5KHsNCiAgICAgICAgICAgIHR5cGU6ICJzZXRQb2xsIiwNCiAgICAgICAgICAgIHBvbGxJZDogcG9sbElkDQogICAgICAgIH0pKTsNCiAgICB9DQoNCiAgICAvL2NhbmNlbCBsaXN0ZW5pbmcgdG8gcG9sbA0KICAgIGNhbmNlbFBvbGwoKSB7DQogICAgICAgIHRoaXMuY3VycmVudFBvbGwgPSBudWxsOw0KICAgICAgICAvL3NlbmQgdG8gc2VydmVyDQogICAgICAgIHRoaXMuc2VuZChKU09OLnN0cmluZ2lmeSh7DQogICAgICAgICAgICB0eXBlOiAiY2FuY2VsUG9sbCINCiAgICAgICAgfSkpOw0KICAgIH0NCg0KICAgIC8vZnVuY3Rpb24gdGhhdCBjYWNoZXMgdGhlIHNlbmRzIHVudGlsIHRoZSB3cyBpcyBvcGVuDQogICAgc2VuZChkYXRhKSB7DQogICAgICAgIGlmICh0aGlzLndzLnJlYWR5U3RhdGUgPT0gMSkgew0KICAgICAgICAgICAgdGhpcy53cy5zZW5kKGRhdGEpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7DQogICAgICAgICAgICAgICAgdGhpcy5zZW5kKGRhdGEpOw0KICAgICAgICAgICAgfSwgMTAwKTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCm47", "qr.html": "PGRpdiBzdHlsZT0iZGlzcGxheTogZ3JpZDthbGlnbi1pdGVtczogY2VudGVyO2p1c3RpZnktaXRlbXM6IGNlbnRlcjtoZWlnaHQ6IDEwMCU7IiBlbGVtZW50PSJhbGwiPg0KICAgIDxwPjxhIGVsZW1lbnQ9InVybCIgdGFyZ2V0PSJfYmxhbmsiPkxvYWRpbmcuLi48L2E+PC9wPg0KICAgIDxjYW52YXMgd2luZG93ZWxlbWVudD0icXIiIHdpbmRvd2lkPSIyIiBoZWlnaHQ9IjEwMCIgd2lkdGg9IjEwMCIgc3R5bGU9Ig0KICAgICAgICBtYXgtd2lkdGg6IDEwMCU7DQogICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7DQogICAgICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgICI+PC9jYW52YXM+DQo8L2Rpdj4=", "run.js": "U3lzdGVtLnByb2dyYW0ucnVuUHJvZ3JhbShQQVRILmZvbGRlcigpICsgIi9tYWluLmpzIik="}